{"version":3,"sources":["webpack:///bundle.js","webpack:///./src/client/index.tsx","webpack:///./src/client/components/index.ts","webpack:///./src/client/components/Chart.tsx","webpack:///./~/react-chartjs/index.js","webpack:///./~/react-chartjs/lib/bar.js","webpack:///./~/react-chartjs/lib/core.js","webpack:///./~/chart.js/Chart.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./~/react-chartjs/lib/doughnut.js","webpack:///./~/react-chartjs/lib/line.js","webpack:///./~/react-chartjs/lib/pie.js","webpack:///./~/react-chartjs/lib/polar-area.js","webpack:///./~/react-chartjs/lib/radar.js","webpack:///./src/client/components/App.tsx","webpack:///./src/client/models/index.ts","webpack:///./src/client/models/Ticker.ts","webpack:///./config.json","webpack:///./src/client/components/Search.tsx"],"names":["webpackJsonp","0","module","exports","__webpack_require__","1","React","ReactDom","components_1","render","createElement","App","document","getElementById","165","Chart_1","Chart","App_1","Search_1","Search","166","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","_","react_chartjs_1","_super","props","call","defaultData","labels","datasets","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","data","range","options","responsive","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","state","updateData","componentWillMount","_this","subscription","ticker","map","tick","scan","reduction","value","push","takeRight","subscribe","setState","componentWillUnmount","unsubscribe","className","name","Line","Component","169","Bar","Doughnut","Pie","PolarArea","Radar","createClass","170","vars","171","ReactDOM","chartType","methodNames","dataKey","extra","type","classData","chart","apply","arguments","displayName","getInitialState","_props","ref","extras","componentDidMount","initializeChart","destroy","componentWillReceiveProps","nextProps","redraw","dataKeys","updatePoints","scale","xLabels","calculateXLabelRotation","update","el","findDOMNode","ctx","getContext","getChart","getCanvass","refs","canvass","getCanvas","i","length","forEach","segment","segmentIndex","segments","keys","key","addData","removeData","set","setIndex","val","pointIndex","values","172","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","previous","context","canvas","computeDimension","element","dimension","defaultView","getComputedStyle","getPropertyValue","width","height","aspectRatio","helpers","retinaScale","defaults","global","animation","animationSteps","animationEasing","showScale","scaleLineColor","scaleLineWidth","scaleShowLabels","scaleLabel","scaleIntegersOnly","scaleBeginAtZero","scaleFontFamily","scaleFontSize","scaleFontStyle","scaleFontColor","maintainAspectRatio","showTooltips","customTooltips","tooltipEvents","tooltipFillColor","tooltipFontFamily","tooltipFontSize","tooltipFontStyle","tooltipFontColor","tooltipTitleFontFamily","tooltipTitleFontSize","tooltipTitleFontStyle","tooltipTitleFontColor","tooltipTitleTemplate","tooltipYPadding","tooltipXPadding","tooltipCaretSize","tooltipCornerRadius","tooltipXOffset","tooltipTemplate","multiTooltipTemplate","multiTooltipKeyBackground","segmentColorDefault","segmentHighlightColorDefaults","onAnimationProgress","onAnimationComplete","types","each","loopable","callback","self","additionalArgs","Array","slice","concat","item","clone","obj","objClone","extend","base","extensionObject","merge","master","args","unshift","indexOf","arrayToSearch","inherits","where","collection","filterCallback","filtered","findNextWhere","startIndex","currentItem","findPreviousWhere","extensions","parent","ChartElement","Surrogate","__super__","noop","uid","id","warn","str","window","console","amd","isNumber","n","isNaN","parseFloat","isFinite","max","array","Math","min","getDecimalPlaces","cap","valueToCap","maxValue","minValue","num","s","toString","split","parseInt","parts","toRadians","radians","degrees","PI","aliasPixel","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","x","distanceFromYCenter","y","radialDistanceFromCenter","sqrt","angle","atan2","distance","pixelWidth","calculateOrderOfMagnitude","splineCurve","FirstPoint","MiddlePoint","AfterPoint","t","d01","pow","d12","fa","fb","inner","outer","floor","log","LN10","template","calculateScaleRange","valuesArray","drawingSize","textSize","startFromZero","integersOnly","minSteps","maxSteps","skipFitting","v","valueRange","abs","rangeOrderOfMagnitude","graphMax","ceil","graphMin","graphRange","stepValue","numberOfSteps","round","steps","templateString","valuesObject","tmpl","fn","test","Function","replace","join","cache","easingEffects","generateLabels","labelsArray","index","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","addEvent","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","animationLoop","totalSteps","easingString","onProgress","onComplete","chartInstance","currentStep","easingFunction","animationFrame","stepDecimal","easeDecimal","getRelativePosition","evt","mouseX","mouseY","e","originalEvent","currentTarget","srcElement","boundingRect","getBoundingClientRect","touches","clientX","left","clientY","top","node","eventType","method","addEventListener","attachEvent","removeEvent","handler","removeEventListener","detachEvent","unbindEvents","bindEvents","arrayOfEvents","events","eventName","getMaximumWidth","domNode","container","parentNode","padding","getStyle","clientWidth","getMaximumHeight","clientHeight","property","currentStyle","getMaximumSize","devicePixelRatio","style","clear","clearRect","fontString","pixelSize","fontStyle","fontFamily","longestText","font","arrayOfStrings","longest","string","textWidth","measureText","drawRoundedRectangle","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","instances","Type","resize","initialize","stop","animationService","cancelAnimation","newWidth","newHeight","reflow","Animation","numSteps","easing","animationObject","draw","addAnimation","generateLegend","legendTemplate","removeProperty","removeAttribute","showTooltip","ChartElements","forceRedraw","activeElements","isChanged","Elements","changed","dataArray","dataIndex","points","bars","tooltipLabels","tooltipColors","medianPosition","dataCollection","xMax","yMax","xMin","yMin","xPositions","yPositions","dataset","hasValue","fill","_saved","stroke","MultiTooltip","xPadding","yPadding","xOffset","textColor","fontSize","titleTextColor","titleFontFamily","titleFontStyle","titleFontSize","cornerRadius","legendColors","legendColorBackground","title","custom","Element","tooltipPosition","Tooltip","caretHeight","text","toBase64Image","toDataURL","ChartType","chartName","baseDefaults","config","configuration","save","restore","newProps","transition","ease","Point","display","inRange","chartX","chartY","hitDetectionRange","hitDetectionRadius","arc","strokeStyle","lineWidth","strokeWidth","fillStyle","Arc","pointRelativePosition","pointRelativeAngle","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","centreAngle","rangeFromCentre","animationPercent","lineJoin","showStroke","Rectangle","halfWidth","leftX","rightX","halfStroke","xAlign","yAlign","caretPadding","tooltipWidth","tooltipRectHeight","tooltipHeight","tooltipX","tooltipY","textAlign","textBaseline","fillText","titleFont","titleHeight","titleWidth","labelWidth","longestTextWidth","halfHeight","getLineHeight","baseLineHeight","afterTitleIndex","label","fillRect","Scale","fit","buildYLabels","yLabels","stepDecimalPlaces","toFixed","yLabelWidth","showLabels","addXLabel","valuesCount","removeXLabel","shift","startPoint","endPoint","cachedYLabelWidth","cachedEndPoint","cachedHeight","calculateYRange","firstRotated","lastRotated","firstWidth","lastWidth","xScalePaddingRight","xScalePaddingLeft","xLabelRotation","cosRotation","originalLabelWidth","xLabelWidth","xGridWidth","calculateX","drawingArea","calculateY","scalingFactor","innerWidth","valueWidth","valueOffset","offsetGridLines","yLabelGap","xStart","labelString","yLabelCenter","linePositionY","drawHorizontalLine","showHorizontalLines","gridLineWidth","gridLineColor","lineColor","xPos","linePos","isRotated","drawVerticalLine","showVerticalLines","translate","rotate","RadialScale","size","backdropPaddingY","calculateCenterOffset","lineArc","setScaleSize","getCircumference","pointPosition","halfTextWidth","furthestRightIndex","furthestRightAngle","furthestLeftIndex","furthestLeftAngle","xProtrusionLeft","xProtrusionRight","radiusReductionRight","radiusReductionLeft","largestPossibleRadius","pointLabelFontSize","furthestRight","furthestLeft","pointLabelFontStyle","pointLabelFontFamily","getPointPosition","getIndexAngle","setCenterPoint","leftMovement","rightMovement","maxRight","maxLeft","xCenter","yCenter","angleMultiplier","distanceFromCenter","thisAngle","yCenterOffset","yHeight","showLabelBackdrop","backdropColor","backdropPaddingX","fontColor","angleLineWidth","angleLineColor","centerOffset","outerPosition","angleLineInterval","backgroundColors","previousOuterPosition","nextOuterPosition","previousOuterHalfway","nextOuterHalfway","pointLabelPosition","pointLabelFontColor","labelsCount","halfLabelsCount","quarterLabelsCount","upperHalf","exactQuarter","frameDuration","animations","dropFrames","digestWrapper","animationWrapper","splice","startDigest","startTime","Date","now","framesToDrop","endTime","delay","frameDelay","timeout","instance","undefined","noConflict","defaultConfig","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","ScaleClass","calculateBarX","datasetCount","datasetIndex","barIndex","xWidth","calculateBaseWidth","xAbsolute","barWidth","calculateBarWidth","baseWidth","activeBars","getBarsAtEvent","eachBars","bar","activeBar","highlightFill","highlightStroke","BarClass","datasetObject","dataPoint","datasetLabel","buildScale","activeElement","barsArray","eventPosition","datasetIterator","dataTotal","scaleOptions","beginAtZero","currentHeight","updatedRanges","newScaleProps","easingDecimal","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animateRotate","animateScale","SegmentArc","activeSegments","getSegmentsAtEvent","activeSegment","highlightColor","calculateTotal","datapoint","color","segmentsArray","location","atIndex","silent","highlight","circumference","calculateCircumference","total","indexToDelete","animDecimal","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","PointClass","activePoints","getPointsAtEvent","eachPoints","point","activePoint","pointsArray","nextPoint","previousPoint","pointsWithValues","tension","controlPoints","bezierCurveTo","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackdropPaddingY","scaleBackdropPaddingX","scaleShowLine","updateScaleRange","datapoints","scaleSizes","angleShowLineOut","activePointsCollection","mousePosition","fromCenter","anglePerIndex","scaleBackgroundColors","totalDataArray","173","__webpack_amd_options__","174","175","176","177","178","179","models_1","_1","configs","tickers","transform","tickerModel","Ticker","activeTickers","isOnline","connectionState","_a","toggle","code","add","get","isUndefined","omitBy","isNull","charts","180","Ticker_1","181","rxjs_1","Subject","defineProperty","isOpen","isConnecting","_ws","Observable","webSocket","url","openObserver","closeObserver","_source","share","client","source","enumerable","configurable","subscriber","sub","ws","filter","c","send","retryWhen","err","socket","readyState","OPEN","CONNECTING","isObjectLike","JSON","stringify","next","521","msft","nflx","adbe","aapl","AKAM","BIDU","CARB","CHICF","CNV","CCOI","CXDO","CRWG","FB","FLPC","GDDY","HDSI","IAC","GEEK","JCOM","LOGL","LLNW","MEET","MOMO","NTES","NEWC","EGOV","OPESY","RAX","522","$dropdown","$","dropdown","onAdd","onRemove","multiple"],"mappings":"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","file":"bundle.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar ReactDom = __webpack_require__(35);\n\tvar components_1 = __webpack_require__(165);\n\tReactDom.render(React.createElement(components_1.App, null), document.getElementById('app'));\n\n\n/***/ },\n\n/***/ 165:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Chart_1 = __webpack_require__(166);\n\texports.Chart = Chart_1.Chart;\n\tvar App_1 = __webpack_require__(179);\n\texports.App = App_1.App;\n\tvar Search_1 = __webpack_require__(522);\n\texports.Search = Search_1.Search;\n\n\n/***/ },\n\n/***/ 166:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar _ = __webpack_require__(167);\n\tvar React = __webpack_require__(2);\n\tvar react_chartjs_1 = __webpack_require__(169);\n\tvar Chart = (function (_super) {\n\t    __extends(Chart, _super);\n\t    function Chart(props) {\n\t        _super.call(this, props);\n\t        this.defaultData = {\n\t            labels: [0, 5, 10, 15, 20, 25, 30],\n\t            datasets: [{\n\t                    fillColor: 'rgba(151,187,205,0.2)',\n\t                    strokeColor: 'rgba(151,187,205,1)',\n\t                    pointColor: 'rgba(151,187,205,1)',\n\t                    pointStrokeColor: '#fff',\n\t                    pointHighlightFill: '#fff',\n\t                    pointHighlightStroke: 'rgba(151,187,205,1)',\n\t                    data: _.range(0, 7, 0)\n\t                }]\n\t        };\n\t        this.options = {\n\t            responsive: true,\n\t            scaleOverride: true,\n\t            scaleSteps: 10,\n\t            scaleStepWidth: 20,\n\t            scaleStartValue: 0\n\t        };\n\t        this.state = {\n\t            data: this.defaultData\n\t        };\n\t    }\n\t    Chart.prototype.updateData = function (data) {\n\t        this.state.data.datasets[0].data = data;\n\t        return this.state.data;\n\t    };\n\t    Chart.prototype.componentWillMount = function () {\n\t        var _this = this;\n\t        this.subscription = this.props.ticker\n\t            .map(function (tick) { return tick.p; })\n\t            .scan(function (reduction, value) {\n\t            return _(reduction)\n\t                .push(value)\n\t                .takeRight(7)\n\t                .value();\n\t        }, _.range(0, 7, 0))\n\t            .map(function (data) { return _this.updateData(data); })\n\t            .subscribe(function (data) { return _this.setState({ data: data }); });\n\t    };\n\t    Chart.prototype.componentWillUnmount = function () {\n\t        this.subscription.unsubscribe();\n\t    };\n\t    Chart.prototype.render = function () {\n\t        return (React.createElement(\"section\", {className: \"chart\"}, React.createElement(\"h2\", null, this.props.name), React.createElement(react_chartjs_1.Line, {data: this.state.data, options: this.options})));\n\t    };\n\t    return Chart;\n\t}(React.Component));\n\texports.Chart = Chart;\n\n\n/***/ },\n\n/***/ 169:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  Bar: __webpack_require__(170),\n\t  Doughnut: __webpack_require__(174),\n\t  Line: __webpack_require__(175),\n\t  Pie: __webpack_require__(176),\n\t  PolarArea: __webpack_require__(177),\n\t  Radar: __webpack_require__(178),\n\t  createClass: __webpack_require__(171).createClass\n\t};\n\n\n/***/ },\n\n/***/ 170:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('Bar', ['getBarsAtEvent']);\n\n\n/***/ },\n\n/***/ 171:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(2);\n\tvar ReactDOM = __webpack_require__(35);\n\t\n\tmodule.exports = {\n\t  createClass: function(chartType, methodNames, dataKey) {\n\t    var classData = {\n\t      displayName: chartType + 'Chart',\n\t      getInitialState: function() { return {}; },\n\t      render: function() {\n\t        var _props = {\n\t          ref: 'canvass'\n\t        };\n\t        for (var name in this.props) {\n\t          if (this.props.hasOwnProperty(name)) {\n\t            if (name !== 'data' && name !== 'options') {\n\t              _props[name] = this.props[name];\n\t            }\n\t          }\n\t        }\n\t        return React.createElement('canvas', _props);\n\t      }\n\t    };\n\t\n\t    var extras = ['clear', 'stop', 'resize', 'toBase64Image', 'generateLegend', 'update', 'addData', 'removeData'];\n\t    function extra(type) {\n\t      classData[type] = function() {\n\t        return this.state.chart[type].apply(this.state.chart, arguments);\n\t      };\n\t    }\n\t\n\t    classData.componentDidMount = function() {\n\t      this.initializeChart(this.props);\n\t    };\n\t\n\t    classData.componentWillUnmount = function() {\n\t      var chart = this.state.chart;\n\t      chart.destroy();\n\t    };\n\t\n\t    classData.componentWillReceiveProps = function(nextProps) {\n\t      var chart = this.state.chart;\n\t      if (nextProps.redraw) {\n\t        chart.destroy();\n\t        this.initializeChart(nextProps);\n\t      } else {\n\t        dataKey = dataKey || dataKeys[chart.name];\n\t        updatePoints(nextProps, chart, dataKey);\n\t        if (chart.scale) {\n\t          chart.scale.xLabels = nextProps.data.labels;\n\t          chart.scale.calculateXLabelRotation();\n\t        }\n\t        chart.update();\n\t      }\n\t    };\n\t\n\t    classData.initializeChart = function(nextProps) {\n\t      var Chart = __webpack_require__(172);\n\t      var el = ReactDOM.findDOMNode(this);\n\t      var ctx = el.getContext(\"2d\");\n\t      var chart = new Chart(ctx)[chartType](nextProps.data, nextProps.options || {});\n\t      this.state.chart = chart;\n\t    };\n\t\n\t    // return the chartjs instance\n\t    classData.getChart = function() {\n\t      return this.state.chart;\n\t    };\n\t\n\t    // return the canvass element that contains the chart\n\t    classData.getCanvass = function() {\n\t      return this.refs.canvass;\n\t    };\n\t\n\t    classData.getCanvas = classData.getCanvass;\n\t\n\t    var i;\n\t    for (i=0; i<extras.length; i++) {\n\t      extra(extras[i]);\n\t    }\n\t    for (i=0; i<methodNames.length; i++) {\n\t      extra(methodNames[i]);\n\t    }\n\t\n\t    return React.createClass(classData);\n\t  }\n\t};\n\t\n\tvar dataKeys = {\n\t  'Line': 'points',\n\t  'Radar': 'points',\n\t  'Bar': 'bars'\n\t};\n\t\n\tvar updatePoints = function(nextProps, chart, dataKey) {\n\t  var name = chart.name;\n\t\n\t  if (name === 'PolarArea' || name === 'Pie' || name === 'Doughnut') {\n\t    nextProps.data.forEach(function(segment, segmentIndex) {\n\t      if (!chart.segments[segmentIndex]) {\n\t        chart.addData(segment);\n\t      } else {\n\t        Object.keys(segment).forEach(function (key) {\n\t          chart.segments[segmentIndex][key] = segment[key];\n\t        });\n\t      }\n\t    });\n\t  } else {\n\t    while (chart.scale.xLabels.length > nextProps.data.labels.length) {\n\t      chart.removeData();\n\t    }\n\t    nextProps.data.datasets.forEach(function(set, setIndex) {\n\t      set.data.forEach(function(val, pointIndex) {\n\t        if (typeof(chart.datasets[setIndex][dataKey][pointIndex]) == \"undefined\") {\n\t          addData(nextProps, chart, setIndex, pointIndex);\n\t        } else {\n\t          chart.datasets[setIndex][dataKey][pointIndex].value = val;\n\t        }\n\t      });\n\t    });\n\t  }\n\t};\n\t\n\tvar addData = function(nextProps, chart, setIndex, pointIndex) {\n\t  var values = [];\n\t  nextProps.data.datasets.forEach(function(set) {\n\t    values.push(set.data[pointIndex]);\n\t  });\n\t  chart.addData(values, nextProps.data.labels[setIndex]);\n\t};\n\n\n/***/ },\n\n/***/ 172:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * Chart.js\n\t * http://chartjs.org/\n\t * Version: 1.1.1\n\t *\n\t * Copyright 2015 Nick Downie\n\t * Released under the MIT license\n\t * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\n\t */\n\t\n\t\n\t(function(){\n\t\n\t\t\"use strict\";\n\t\n\t\t//Declare root variable - window in the browser, global on the server\n\t\tvar root = this,\n\t\t\tprevious = root.Chart;\n\t\n\t\t//Occupy the global variable of Chart, and create a simple base class\n\t\tvar Chart = function(context){\n\t\t\tvar chart = this;\n\t\t\tthis.canvas = context.canvas;\n\t\n\t\t\tthis.ctx = context;\n\t\n\t\t\t//Variables global to the chart\n\t\t\tvar computeDimension = function(element,dimension)\n\t\t\t{\n\t\t\t\tif (element['offset'+dimension])\n\t\t\t\t{\n\t\t\t\t\treturn element['offset'+dimension];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn document.defaultView.getComputedStyle(element).getPropertyValue(dimension);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tvar width = this.width = computeDimension(context.canvas,'Width') || context.canvas.width;\n\t\t\tvar height = this.height = computeDimension(context.canvas,'Height') || context.canvas.height;\n\t\n\t\t\tthis.aspectRatio = this.width / this.height;\n\t\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\n\t\t\thelpers.retinaScale(this);\n\t\n\t\t\treturn this;\n\t\t};\n\t\t//Globally expose the defaults to allow for user updating/changing\n\t\tChart.defaults = {\n\t\t\tglobal: {\n\t\t\t\t// Boolean - Whether to animate the chart\n\t\t\t\tanimation: true,\n\t\n\t\t\t\t// Number - Number of animation steps\n\t\t\t\tanimationSteps: 60,\n\t\n\t\t\t\t// String - Animation easing effect\n\t\t\t\tanimationEasing: \"easeOutQuart\",\n\t\n\t\t\t\t// Boolean - If we should show the scale at all\n\t\t\t\tshowScale: true,\n\t\n\t\t\t\t// Boolean - If we want to override with a hard coded scale\n\t\t\t\tscaleOverride: false,\n\t\n\t\t\t\t// ** Required if scaleOverride is true **\n\t\t\t\t// Number - The number of steps in a hard coded scale\n\t\t\t\tscaleSteps: null,\n\t\t\t\t// Number - The value jump in the hard coded scale\n\t\t\t\tscaleStepWidth: null,\n\t\t\t\t// Number - The scale starting value\n\t\t\t\tscaleStartValue: null,\n\t\n\t\t\t\t// String - Colour of the scale line\n\t\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",\n\t\n\t\t\t\t// Number - Pixel width of the scale line\n\t\t\t\tscaleLineWidth: 1,\n\t\n\t\t\t\t// Boolean - Whether to show labels on the scale\n\t\t\t\tscaleShowLabels: true,\n\t\n\t\t\t\t// Interpolated JS string - can access value\n\t\t\t\tscaleLabel: \"<%=value%>\",\n\t\n\t\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there\n\t\t\t\tscaleIntegersOnly: true,\n\t\n\t\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\t\t\tscaleBeginAtZero: false,\n\t\n\t\t\t\t// String - Scale label font declaration for the scale label\n\t\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t\n\t\t\t\t// Number - Scale label font size in pixels\n\t\t\t\tscaleFontSize: 12,\n\t\n\t\t\t\t// String - Scale label font weight style\n\t\t\t\tscaleFontStyle: \"normal\",\n\t\n\t\t\t\t// String - Scale label font colour\n\t\t\t\tscaleFontColor: \"#666\",\n\t\n\t\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.\n\t\t\t\tresponsive: false,\n\t\n\t\t\t\t// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n\t\t\t\tmaintainAspectRatio: true,\n\t\n\t\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove\n\t\t\t\tshowTooltips: true,\n\t\n\t\t\t\t// Boolean - Determines whether to draw built-in tooltip or call custom tooltip function\n\t\t\t\tcustomTooltips: false,\n\t\n\t\t\t\t// Array - Array of string names to attach tooltip events\n\t\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],\n\t\n\t\t\t\t// String - Tooltip background colour\n\t\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",\n\t\n\t\t\t\t// String - Tooltip label font declaration for the scale label\n\t\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t\n\t\t\t\t// Number - Tooltip label font size in pixels\n\t\t\t\ttooltipFontSize: 14,\n\t\n\t\t\t\t// String - Tooltip font weight style\n\t\t\t\ttooltipFontStyle: \"normal\",\n\t\n\t\t\t\t// String - Tooltip label font colour\n\t\t\t\ttooltipFontColor: \"#fff\",\n\t\n\t\t\t\t// String - Tooltip title font declaration for the scale label\n\t\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t\n\t\t\t\t// Number - Tooltip title font size in pixels\n\t\t\t\ttooltipTitleFontSize: 14,\n\t\n\t\t\t\t// String - Tooltip title font weight style\n\t\t\t\ttooltipTitleFontStyle: \"bold\",\n\t\n\t\t\t\t// String - Tooltip title font colour\n\t\t\t\ttooltipTitleFontColor: \"#fff\",\n\t\n\t\t\t\t// String - Tooltip title template\n\t\t\t\ttooltipTitleTemplate: \"<%= label%>\",\n\t\n\t\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\t\ttooltipYPadding: 6,\n\t\n\t\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\t\ttooltipXPadding: 6,\n\t\n\t\t\t\t// Number - Size of the caret on the tooltip\n\t\t\t\ttooltipCaretSize: 8,\n\t\n\t\t\t\t// Number - Pixel radius of the tooltip border\n\t\t\t\ttooltipCornerRadius: 6,\n\t\n\t\t\t\t// Number - Pixel offset from point x to tooltip edge\n\t\t\t\ttooltipXOffset: 10,\n\t\n\t\t\t\t// String - Template string for single tooltips\n\t\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\n\t\n\t\t\t\t// String - Template string for single tooltips\n\t\t\t\tmultiTooltipTemplate: \"<%= datasetLabel %>: <%= value %>\",\n\t\n\t\t\t\t// String - Colour behind the legend colour block\n\t\t\t\tmultiTooltipKeyBackground: '#fff',\n\t\n\t\t\t\t// Array - A list of colors to use as the defaults\n\t\t\t\tsegmentColorDefault: [\"#A6CEE3\", \"#1F78B4\", \"#B2DF8A\", \"#33A02C\", \"#FB9A99\", \"#E31A1C\", \"#FDBF6F\", \"#FF7F00\", \"#CAB2D6\", \"#6A3D9A\", \"#B4B482\", \"#B15928\" ],\n\t\n\t\t\t\t// Array - A list of highlight colors to use as the defaults\n\t\t\t\tsegmentHighlightColorDefaults: [ \"#CEF6FF\", \"#47A0DC\", \"#DAFFB2\", \"#5BC854\", \"#FFC2C1\", \"#FF4244\", \"#FFE797\", \"#FFA728\", \"#F2DAFE\", \"#9265C2\", \"#DCDCAA\", \"#D98150\" ],\n\t\n\t\t\t\t// Function - Will fire on animation progression.\n\t\t\t\tonAnimationProgress: function(){},\n\t\n\t\t\t\t// Function - Will fire on animation completion.\n\t\t\t\tonAnimationComplete: function(){}\n\t\n\t\t\t}\n\t\t};\n\t\n\t\t//Create a dictionary of chart types, to allow for extension of existing types\n\t\tChart.types = {};\n\t\n\t\t//Global Chart helpers object for utility methods and classes\n\t\tvar helpers = Chart.helpers = {};\n\t\n\t\t\t//-- Basic js utility methods\n\t\tvar each = helpers.each = function(loopable,callback,self){\n\t\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);\n\t\t\t\t// Check to see if null or undefined firstly.\n\t\t\t\tif (loopable){\n\t\t\t\t\tif (loopable.length === +loopable.length){\n\t\t\t\t\t\tvar i;\n\t\t\t\t\t\tfor (i=0; i<loopable.length; i++){\n\t\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tfor (var item in loopable){\n\t\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tclone = helpers.clone = function(obj){\n\t\t\t\tvar objClone = {};\n\t\t\t\teach(obj,function(value,key){\n\t\t\t\t\tif (obj.hasOwnProperty(key)){\n\t\t\t\t\t\tobjClone[key] = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn objClone;\n\t\t\t},\n\t\t\textend = helpers.extend = function(base){\n\t\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {\n\t\t\t\t\teach(extensionObject,function(value,key){\n\t\t\t\t\t\tif (extensionObject.hasOwnProperty(key)){\n\t\t\t\t\t\t\tbase[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn base;\n\t\t\t},\n\t\t\tmerge = helpers.merge = function(base,master){\n\t\t\t\t//Merge properties in left object over to a shallow clone of object right.\n\t\t\t\tvar args = Array.prototype.slice.call(arguments,0);\n\t\t\t\targs.unshift({});\n\t\t\t\treturn extend.apply(null, args);\n\t\t\t},\n\t\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){\n\t\t\t\tif (Array.prototype.indexOf) {\n\t\t\t\t\treturn arrayToSearch.indexOf(item);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {\n\t\t\t\t\t\tif (arrayToSearch[i] === item) return i;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t},\n\t\t\twhere = helpers.where = function(collection, filterCallback){\n\t\t\t\tvar filtered = [];\n\t\n\t\t\t\thelpers.each(collection, function(item){\n\t\t\t\t\tif (filterCallback(item)){\n\t\t\t\t\t\tfiltered.push(item);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\treturn filtered;\n\t\t\t},\n\t\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t\t// Default to start of the array\n\t\t\t\tif (!startIndex){\n\t\t\t\t\tstartIndex = -1;\n\t\t\t\t}\n\t\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\t\treturn currentItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t\t// Default to end of the array\n\t\t\t\tif (!startIndex){\n\t\t\t\t\tstartIndex = arrayToSearch.length;\n\t\t\t\t}\n\t\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\t\treturn currentItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tinherits = helpers.inherits = function(extensions){\n\t\t\t\t//Basic javascript inheritance based on the model created in Backbone.js\n\t\t\t\tvar parent = this;\n\t\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\n\t\n\t\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};\n\t\t\t\tSurrogate.prototype = parent.prototype;\n\t\t\t\tChartElement.prototype = new Surrogate();\n\t\n\t\t\t\tChartElement.extend = inherits;\n\t\n\t\t\t\tif (extensions) extend(ChartElement.prototype, extensions);\n\t\n\t\t\t\tChartElement.__super__ = parent.prototype;\n\t\n\t\t\t\treturn ChartElement;\n\t\t\t},\n\t\t\tnoop = helpers.noop = function(){},\n\t\t\tuid = helpers.uid = (function(){\n\t\t\t\tvar id=0;\n\t\t\t\treturn function(){\n\t\t\t\t\treturn \"chart-\" + id++;\n\t\t\t\t};\n\t\t\t})(),\n\t\t\twarn = helpers.warn = function(str){\n\t\t\t\t//Method for warning of errors\n\t\t\t\tif (window.console && typeof window.console.warn === \"function\") console.warn(str);\n\t\t\t},\n\t\t\tamd = helpers.amd = (\"function\" === 'function' && __webpack_require__(173)),\n\t\t\t//-- Math methods\n\t\t\tisNumber = helpers.isNumber = function(n){\n\t\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t\t\t},\n\t\t\tmax = helpers.max = function(array){\n\t\t\t\treturn Math.max.apply( Math, array );\n\t\t\t},\n\t\t\tmin = helpers.min = function(array){\n\t\t\t\treturn Math.min.apply( Math, array );\n\t\t\t},\n\t\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){\n\t\t\t\tif(isNumber(maxValue)) {\n\t\t\t\t\tif( valueToCap > maxValue ) {\n\t\t\t\t\t\treturn maxValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(isNumber(minValue)){\n\t\t\t\t\tif ( valueToCap < minValue ){\n\t\t\t\t\t\treturn minValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn valueToCap;\n\t\t\t},\n\t\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){\n\t\t\t\tif (num%1!==0 && isNumber(num)){\n\t\t\t\t\tvar s = num.toString();\n\t\t\t\t\tif(s.indexOf(\"e-\") < 0){\n\t\t\t\t\t\t// no exponent, e.g. 0.01\n\t\t\t\t\t\treturn s.split(\".\")[1].length;\n\t\t\t\t\t}\n\t\t\t\t\telse if(s.indexOf(\".\") < 0) {\n\t\t\t\t\t\t// no decimal point, e.g. 1e-9\n\t\t\t\t\t\treturn parseInt(s.split(\"e-\")[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// exponent and decimal point, e.g. 1.23e-9\n\t\t\t\t\t\tvar parts = s.split(\".\")[1].split(\"e-\");\n\t\t\t\t\t\treturn parts[0].length + parseInt(parts[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttoRadians = helpers.radians = function(degrees){\n\t\t\t\treturn degrees * (Math.PI/180);\n\t\t\t},\n\t\t\t// Gets the angle from vertical upright to the point about a centre.\n\t\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){\n\t\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\t\n\t\n\t\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\t\n\t\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle\n\t\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){\n\t\t\t\t\tangle += Math.PI*2;\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tangle: angle,\n\t\t\t\t\tdistance: radialDistanceFromCenter\n\t\t\t\t};\n\t\t\t},\n\t\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){\n\t\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t\t\t},\n\t\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){\n\t\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\t\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),\n\t\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),\n\t\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta\n\t\t\t\t\tfb=t*d12/(d01+d12);\n\t\t\t\treturn {\n\t\t\t\t\tinner : {\n\t\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t\t},\n\t\t\t\t\touter : {\n\t\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){\n\t\t\t\treturn Math.floor(Math.log(val) / Math.LN10);\n\t\t\t},\n\t\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\n\t\n\t\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base\n\t\t\t\tvar minSteps = 2,\n\t\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),\n\t\t\t\t\tskipFitting = (minSteps >= maxSteps);\n\t\n\t\t\t\t// Filter out null values since these would min() to zero\n\t\t\t\tvar values = [];\n\t\t\t\teach(valuesArray, function( v ){\n\t\t\t\t\tv == null || values.push( v );\n\t\t\t\t});\n\t\t\t\tvar minValue = min(values),\n\t\t\t\t    maxValue = max(values);\n\t\n\t\t\t\t// We need some degree of separation here to calculate the scales if all the values are the same\n\t\t\t\t// Adding/minusing 0.5 will give us a range of 1.\n\t\t\t\tif (maxValue === minValue){\n\t\t\t\t\tmaxValue += 0.5;\n\t\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero\n\t\t\t\t\tif (minValue >= 0.5 && !startFromZero){\n\t\t\t\t\t\tminValue -= 0.5;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// Make up a whole number above the values\n\t\t\t\t\t\tmaxValue += 0.5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),\n\t\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),\n\t\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\t\tgraphRange = graphMax - graphMin,\n\t\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);\n\t\n\t\t\t\t//If we have more space on the graph we'll use it to give more definition to the data\n\t\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {\n\t\t\t\t\tif(numberOfSteps > maxSteps){\n\t\t\t\t\t\tstepValue *=2;\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.\n\t\t\t\t\t\tif (numberOfSteps % 1 !== 0){\n\t\t\t\t\t\t\tskipFitting = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//We can fit in double the amount of scale points on the scale\n\t\t\t\t\telse{\n\t\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal\n\t\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){\n\t\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\n\t\t\t\t\t\t\tif(stepValue/2 % 1 === 0){\n\t\t\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//If it would make it a float break out of the loop\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (skipFitting){\n\t\t\t\t\tnumberOfSteps = minSteps;\n\t\t\t\t\tstepValue = graphRange / numberOfSteps;\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tsteps : numberOfSteps,\n\t\t\t\t\tstepValue : stepValue,\n\t\t\t\t\tmin : graphMin,\n\t\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)\n\t\t\t\t};\n\t\n\t\t\t},\n\t\t\t/* jshint ignore:start */\n\t\t\t// Blows up jshint errors based on the new Function constructor\n\t\t\t//Templating methods\n\t\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\n\t\t\ttemplate = helpers.template = function(templateString, valuesObject){\n\t\n\t\t\t\t// If templateString is function rather than string-template - call the function for valuesObject\n\t\n\t\t\t\tif(templateString instanceof Function){\n\t\t\t\t \treturn templateString(valuesObject);\n\t\t\t \t}\n\t\n\t\t\t\tvar cache = {};\n\t\t\t\tfunction tmpl(str, data){\n\t\t\t\t\t// Figure out if we're getting a template, or if we need to\n\t\t\t\t\t// load the template - and be sure to cache the result.\n\t\t\t\t\tvar fn = !/\\W/.test(str) ?\n\t\t\t\t\tcache[str] = cache[str] :\n\t\n\t\t\t\t\t// Generate a reusable function that will serve as a template\n\t\t\t\t\t// generator (and which will be cached).\n\t\t\t\t\tnew Function(\"obj\",\n\t\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\t\n\t\t\t\t\t\t// Introduce the data as local variables using with(){}\n\t\t\t\t\t\t\"with(obj){p.push('\" +\n\t\n\t\t\t\t\t\t// Convert the template into pure JavaScript\n\t\t\t\t\t\tstr\n\t\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")\n\t\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")\n\t\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n\t\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")\n\t\t\t\t\t\t\t.split(\"\\t\").join(\"');\")\n\t\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")\n\t\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +\n\t\t\t\t\t\t\"');}return p.join('');\"\n\t\t\t\t\t);\n\t\n\t\t\t\t\t// Provide some basic currying to the user\n\t\t\t\t\treturn data ? fn( data ) : fn;\n\t\t\t\t}\n\t\t\t\treturn tmpl(templateString,valuesObject);\n\t\t\t},\n\t\t\t/* jshint ignore:end */\n\t\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){\n\t\t\t\tvar labelsArray = new Array(numberOfSteps);\n\t\t\t\tif (templateString){\n\t\t\t\t\teach(labelsArray,function(val,index){\n\t\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn labelsArray;\n\t\t\t},\n\t\t\t//--Animation methods\n\t\t\t//Easing functions adapted from Robert Penner's easing equations\n\t\t\t//http://www.robertpenner.com/easing/\n\t\t\teasingEffects = helpers.easingEffects = {\n\t\t\t\tlinear: function (t) {\n\t\t\t\t\treturn t;\n\t\t\t\t},\n\t\t\t\teaseInQuad: function (t) {\n\t\t\t\t\treturn t * t;\n\t\t\t\t},\n\t\t\t\teaseOutQuad: function (t) {\n\t\t\t\t\treturn -1 * t * (t - 2);\n\t\t\t\t},\n\t\t\t\teaseInOutQuad: function (t) {\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * t * t;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t\t\t},\n\t\t\t\teaseInCubic: function (t) {\n\t\t\t\t\treturn t * t * t;\n\t\t\t\t},\n\t\t\t\teaseOutCubic: function (t) {\n\t\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t\t\t},\n\t\t\t\teaseInOutCubic: function (t) {\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * t * t * t;\n\t\t\t\t\t}\n\t\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t\t\t},\n\t\t\t\teaseInQuart: function (t) {\n\t\t\t\t\treturn t * t * t * t;\n\t\t\t\t},\n\t\t\t\teaseOutQuart: function (t) {\n\t\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t\t\t},\n\t\t\t\teaseInOutQuart: function (t) {\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * t * t * t * t;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t\t\t},\n\t\t\t\teaseInQuint: function (t) {\n\t\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t\t\t},\n\t\t\t\teaseOutQuint: function (t) {\n\t\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t\t\t},\n\t\t\t\teaseInOutQuint: function (t) {\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * t * t * t * t * t;\n\t\t\t\t\t}\n\t\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t\t\t},\n\t\t\t\teaseInSine: function (t) {\n\t\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t\t\t},\n\t\t\t\teaseOutSine: function (t) {\n\t\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t\t\t},\n\t\t\t\teaseInOutSine: function (t) {\n\t\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t\t\t},\n\t\t\t\teaseInExpo: function (t) {\n\t\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t\t\t},\n\t\t\t\teaseOutExpo: function (t) {\n\t\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t\t\t},\n\t\t\t\teaseInOutExpo: function (t) {\n\t\t\t\t\tif (t === 0){\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (t === 1){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t\t\t}\n\t\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t\t},\n\t\t\t\teaseInCirc: function (t) {\n\t\t\t\t\tif (t >= 1){\n\t\t\t\t\t\treturn t;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t\t\t},\n\t\t\t\teaseOutCirc: function (t) {\n\t\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t\t\t},\n\t\t\t\teaseInOutCirc: function (t) {\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t\t\t}\n\t\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t\t\t},\n\t\t\t\teaseInElastic: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\tvar p = 0;\n\t\t\t\t\tvar a = 1;\n\t\t\t\t\tif (t === 0){\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (!p){\n\t\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t\t}\n\t\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\t\ta = 1;\n\t\t\t\t\t\ts = p / 4;\n\t\t\t\t\t} else{\n\t\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t\t}\n\t\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t\t},\n\t\t\t\teaseOutElastic: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\tvar p = 0;\n\t\t\t\t\tvar a = 1;\n\t\t\t\t\tif (t === 0){\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (!p){\n\t\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t\t}\n\t\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\t\ta = 1;\n\t\t\t\t\t\ts = p / 4;\n\t\t\t\t\t} else{\n\t\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t\t}\n\t\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t\t\t},\n\t\t\t\teaseInOutElastic: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\tvar p = 0;\n\t\t\t\t\tvar a = 1;\n\t\t\t\t\tif (t === 0){\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ((t /= 1 / 2) == 2){\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (!p){\n\t\t\t\t\t\tp = 1 * (0.3 * 1.5);\n\t\t\t\t\t}\n\t\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\t\ta = 1;\n\t\t\t\t\t\ts = p / 4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t\t}\n\t\t\t\t\tif (t < 1){\n\t\t\t\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));}\n\t\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t\t\t},\n\t\t\t\teaseInBack: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t\t\t},\n\t\t\t\teaseOutBack: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t\t\t},\n\t\t\t\teaseInOutBack: function (t) {\n\t\t\t\t\tvar s = 1.70158;\n\t\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\t\treturn 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t\t\t}\n\t\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t\t\t},\n\t\t\t\teaseInBounce: function (t) {\n\t\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t\t\t},\n\t\t\t\teaseOutBounce: function (t) {\n\t\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\teaseInOutBounce: function (t) {\n\t\t\t\t\tif (t < 1 / 2){\n\t\t\t\t\t\treturn easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t\t\t}\n\t\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t\t\t}\n\t\t\t},\n\t\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){\n\t\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\t\tfunction(callback) {\n\t\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t\t\t};\n\t\t\t})(),\n\t\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){\n\t\t\t\treturn window.cancelAnimationFrame ||\n\t\t\t\t\twindow.webkitCancelAnimationFrame ||\n\t\t\t\t\twindow.mozCancelAnimationFrame ||\n\t\t\t\t\twindow.oCancelAnimationFrame ||\n\t\t\t\t\twindow.msCancelAnimationFrame ||\n\t\t\t\t\tfunction(callback) {\n\t\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);\n\t\t\t\t\t};\n\t\t\t})(),\n\t\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\n\t\n\t\t\t\tvar currentStep = 0,\n\t\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;\n\t\n\t\t\t\tvar animationFrame = function(){\n\t\t\t\t\tcurrentStep++;\n\t\t\t\t\tvar stepDecimal = currentStep/totalSteps;\n\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\t\n\t\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);\n\t\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);\n\t\t\t\t\tif (currentStep < totalSteps){\n\t\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);\n\t\t\t\t\t} else{\n\t\t\t\t\t\tonComplete.apply(chartInstance);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trequestAnimFrame(animationFrame);\n\t\t\t},\n\t\t\t//-- DOM methods\n\t\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){\n\t\t\t\tvar mouseX, mouseY;\n\t\t\t\tvar e = evt.originalEvent || evt,\n\t\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\t\t\tboundingRect = canvas.getBoundingClientRect();\n\t\n\t\t\t\tif (e.touches){\n\t\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;\n\t\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;\n\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmouseX = e.clientX - boundingRect.left;\n\t\t\t\t\tmouseY = e.clientY - boundingRect.top;\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tx : mouseX,\n\t\t\t\t\ty : mouseY\n\t\t\t\t};\n\t\n\t\t\t},\n\t\t\taddEvent = helpers.addEvent = function(node,eventType,method){\n\t\t\t\tif (node.addEventListener){\n\t\t\t\t\tnode.addEventListener(eventType,method);\n\t\t\t\t} else if (node.attachEvent){\n\t\t\t\t\tnode.attachEvent(\"on\"+eventType, method);\n\t\t\t\t} else {\n\t\t\t\t\tnode[\"on\"+eventType] = method;\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){\n\t\t\t\tif (node.removeEventListener){\n\t\t\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t\t\t} else if (node.detachEvent){\n\t\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);\n\t\t\t\t} else{\n\t\t\t\t\tnode[\"on\" + eventType] = noop;\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){\n\t\t\t\t// Create the events object if it's not already present\n\t\t\t\tif (!chartInstance.events) chartInstance.events = {};\n\t\n\t\t\t\teach(arrayOfEvents,function(eventName){\n\t\t\t\t\tchartInstance.events[eventName] = function(){\n\t\t\t\t\t\thandler.apply(chartInstance, arguments);\n\t\t\t\t\t};\n\t\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);\n\t\t\t\t});\n\t\t\t},\n\t\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {\n\t\t\t\teach(arrayOfEvents, function(handler,eventName){\n\t\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);\n\t\t\t\t});\n\t\t\t},\n\t\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){\n\t\t\t\tvar container = domNode.parentNode,\n\t\t\t\t    padding = parseInt(getStyle(container, 'padding-left')) + parseInt(getStyle(container, 'padding-right'));\n\t\t\t\t// TODO = check cross browser stuff with this.\n\t\t\t\treturn container ? container.clientWidth - padding : 0;\n\t\t\t},\n\t\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){\n\t\t\t\tvar container = domNode.parentNode,\n\t\t\t\t    padding = parseInt(getStyle(container, 'padding-bottom')) + parseInt(getStyle(container, 'padding-top'));\n\t\t\t\t// TODO = check cross browser stuff with this.\n\t\t\t\treturn container ? container.clientHeight - padding : 0;\n\t\t\t},\n\t\t\tgetStyle = helpers.getStyle = function (el, property) {\n\t\t\t\treturn el.currentStyle ?\n\t\t\t\t\tel.currentStyle[property] :\n\t\t\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t\t\t},\n\t\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support\n\t\t\tretinaScale = helpers.retinaScale = function(chart){\n\t\t\t\tvar ctx = chart.ctx,\n\t\t\t\t\twidth = chart.canvas.width,\n\t\t\t\t\theight = chart.canvas.height;\n\t\n\t\t\t\tif (window.devicePixelRatio) {\n\t\t\t\t\tctx.canvas.style.width = width + \"px\";\n\t\t\t\t\tctx.canvas.style.height = height + \"px\";\n\t\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;\n\t\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;\n\t\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t\t\t\t}\n\t\t\t},\n\t\t\t//-- Canvas methods\n\t\t\tclear = helpers.clear = function(chart){\n\t\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);\n\t\t\t},\n\t\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){\n\t\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;\n\t\t\t},\n\t\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){\n\t\t\t\tctx.font = font;\n\t\t\t\tvar longest = 0;\n\t\t\t\teach(arrayOfStrings,function(string){\n\t\t\t\t\tvar textWidth = ctx.measureText(string).width;\n\t\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;\n\t\t\t\t});\n\t\t\t\treturn longest;\n\t\t\t},\n\t\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x + radius, y);\n\t\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\t\tctx.lineTo(x, y + radius);\n\t\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t\t\tctx.closePath();\n\t\t\t};\n\t\n\t\n\t\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t\t//Destroy method on the chart will remove the instance of the chart from this reference.\n\t\tChart.instances = {};\n\t\n\t\tChart.Type = function(data,options,chart){\n\t\t\tthis.options = options;\n\t\t\tthis.chart = chart;\n\t\t\tthis.id = uid();\n\t\t\t//Add the chart instance to the global namespace\n\t\t\tChart.instances[this.id] = this;\n\t\n\t\t\t// Initialize is always called when a chart type is created\n\t\t\t// By default it is a no op, but it should be extended\n\t\t\tif (options.responsive){\n\t\t\t\tthis.resize();\n\t\t\t}\n\t\t\tthis.initialize.call(this,data);\n\t\t};\n\t\n\t\t//Core methods that'll be a part of every chart type\n\t\textend(Chart.Type.prototype,{\n\t\t\tinitialize : function(){return this;},\n\t\t\tclear : function(){\n\t\t\t\tclear(this.chart);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tstop : function(){\n\t\t\t\t// Stops any current animation loop occuring\n\t\t\t\tChart.animationService.cancelAnimation(this);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tresize : function(callback){\n\t\t\t\tthis.stop();\n\t\t\t\tvar canvas = this.chart.canvas,\n\t\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),\n\t\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\n\t\n\t\t\t\tcanvas.width = this.chart.width = newWidth;\n\t\t\t\tcanvas.height = this.chart.height = newHeight;\n\t\n\t\t\t\tretinaScale(this.chart);\n\t\n\t\t\t\tif (typeof callback === \"function\"){\n\t\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\treflow : noop,\n\t\t\trender : function(reflow){\n\t\t\t\tif (reflow){\n\t\t\t\t\tthis.reflow();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.options.animation && !reflow){\n\t\t\t\t\tvar animation = new Chart.Animation();\n\t\t\t\t\tanimation.numSteps = this.options.animationSteps;\n\t\t\t\t\tanimation.easing = this.options.animationEasing;\n\t\t\t\t\t\n\t\t\t\t\t// render function\n\t\t\t\t\tanimation.render = function(chartInstance, animationObject) {\n\t\t\t\t\t\tvar easingFunction = helpers.easingEffects[animationObject.easing];\n\t\t\t\t\t\tvar stepDecimal = animationObject.currentStep / animationObject.numSteps;\n\t\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\t\t\t\t\t\t\n\t\t\t\t\t\tchartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// user events\n\t\t\t\t\tanimation.onAnimationProgress = this.options.onAnimationProgress;\n\t\t\t\t\tanimation.onAnimationComplete = this.options.onAnimationComplete;\n\t\t\t\t\t\n\t\t\t\t\tChart.animationService.addAnimation(this, animation);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.draw();\n\t\t\t\t\tthis.options.onAnimationComplete.call(this);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tgenerateLegend : function(){\n\t\t\t\treturn helpers.template(this.options.legendTemplate, this);\n\t\t\t},\n\t\t\tdestroy : function(){\n\t\t\t\tthis.stop();\n\t\t\t\tthis.clear();\n\t\t\t\tunbindEvents(this, this.events);\n\t\t\t\tvar canvas = this.chart.canvas;\n\t\n\t\t\t\t// Reset canvas height/width attributes starts a fresh with the canvas context\n\t\t\t\tcanvas.width = this.chart.width;\n\t\t\t\tcanvas.height = this.chart.height;\n\t\n\t\t\t\t// < IE9 doesn't support removeProperty\n\t\t\t\tif (canvas.style.removeProperty) {\n\t\t\t\t\tcanvas.style.removeProperty('width');\n\t\t\t\t\tcanvas.style.removeProperty('height');\n\t\t\t\t} else {\n\t\t\t\t\tcanvas.style.removeAttribute('width');\n\t\t\t\t\tcanvas.style.removeAttribute('height');\n\t\t\t\t}\n\t\n\t\t\t\tdelete Chart.instances[this.id];\n\t\t\t},\n\t\t\tshowTooltip : function(ChartElements, forceRedraw){\n\t\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.\n\t\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];\n\t\n\t\t\t\tvar isChanged = (function(Elements){\n\t\t\t\t\tvar changed = false;\n\t\n\t\t\t\t\tif (Elements.length !== this.activeElements.length){\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\treturn changed;\n\t\t\t\t\t}\n\t\n\t\t\t\t\teach(Elements, function(element, index){\n\t\t\t\t\t\tif (element !== this.activeElements[index]){\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\t\t\t\treturn changed;\n\t\t\t\t}).call(this, ChartElements);\n\t\n\t\t\t\tif (!isChanged && !forceRedraw){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.activeElements = ChartElements;\n\t\t\t\t}\n\t\t\t\tthis.draw();\n\t\t\t\tif(this.options.customTooltips){\n\t\t\t\t\tthis.options.customTooltips(false);\n\t\t\t\t}\n\t\t\t\tif (ChartElements.length > 0){\n\t\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index\n\t\t\t\t\tif (this.datasets && this.datasets.length > 1) {\n\t\t\t\t\t\tvar dataArray,\n\t\t\t\t\t\t\tdataIndex;\n\t\n\t\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;\n\t\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);\n\t\t\t\t\t\t\tif (dataIndex !== -1){\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar tooltipLabels = [],\n\t\t\t\t\t\t\ttooltipColors = [],\n\t\t\t\t\t\t\tmedianPosition = (function(index) {\n\t\n\t\t\t\t\t\t\t\t// Get all the points at that particular index\n\t\t\t\t\t\t\t\tvar Elements = [],\n\t\t\t\t\t\t\t\t\tdataCollection,\n\t\t\t\t\t\t\t\t\txPositions = [],\n\t\t\t\t\t\t\t\t\tyPositions = [],\n\t\t\t\t\t\t\t\t\txMax,\n\t\t\t\t\t\t\t\t\tyMax,\n\t\t\t\t\t\t\t\t\txMin,\n\t\t\t\t\t\t\t\t\tyMin;\n\t\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;\n\t\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){\n\t\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\t\t\thelpers.each(Elements, function(element) {\n\t\t\t\t\t\t\t\t\txPositions.push(element.x);\n\t\t\t\t\t\t\t\t\tyPositions.push(element.y);\n\t\n\t\n\t\t\t\t\t\t\t\t\t//Include any colour information about the element\n\t\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));\n\t\t\t\t\t\t\t\t\ttooltipColors.push({\n\t\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,\n\t\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor\n\t\t\t\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\t\t\t}, this);\n\t\n\t\t\t\t\t\t\t\tyMin = min(yPositions);\n\t\t\t\t\t\t\t\tyMax = max(yPositions);\n\t\n\t\t\t\t\t\t\t\txMin = min(xPositions);\n\t\t\t\t\t\t\t\txMax = max(xPositions);\n\t\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,\n\t\t\t\t\t\t\t\t\ty: (yMin + yMax)/2\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}).call(this, dataIndex);\n\t\n\t\t\t\t\t\tnew Chart.MultiTooltip({\n\t\t\t\t\t\t\tx: medianPosition.x,\n\t\t\t\t\t\t\ty: medianPosition.y,\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\t\txOffset: this.options.tooltipXOffset,\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,\n\t\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,\n\t\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,\n\t\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\t\tlabels: tooltipLabels,\n\t\t\t\t\t\t\tlegendColors: tooltipColors,\n\t\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,\n\t\t\t\t\t\t\ttitle: template(this.options.tooltipTitleTemplate,ChartElements[0]),\n\t\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\t\tctx: this.chart.ctx,\n\t\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t\t}).draw();\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\teach(ChartElements, function(Element) {\n\t\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();\n\t\t\t\t\t\t\tnew Chart.Tooltip({\n\t\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),\n\t\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),\n\t\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,\n\t\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),\n\t\t\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t\t\t}).draw();\n\t\t\t\t\t\t}, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\ttoBase64Image : function(){\n\t\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Type.extend = function(extensions){\n\t\n\t\t\tvar parent = this;\n\t\n\t\t\tvar ChartType = function(){\n\t\t\t\treturn parent.apply(this,arguments);\n\t\t\t};\n\t\n\t\t\t//Copy the prototype object of the this class\n\t\t\tChartType.prototype = clone(parent.prototype);\n\t\t\t//Now overwrite some of the properties in the base class with the new extensions\n\t\t\textend(ChartType.prototype, extensions);\n\t\n\t\t\tChartType.extend = Chart.Type.extend;\n\t\n\t\t\tif (extensions.name || parent.prototype.name){\n\t\n\t\t\t\tvar chartName = extensions.name || parent.prototype.name;\n\t\t\t\t//Assign any potential default values of the new chart type\n\t\n\t\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.\n\t\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart\n\t\t\t\t//doesn't define some defaults of their own.\n\t\n\t\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};\n\t\n\t\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);\n\t\n\t\t\t\tChart.types[chartName] = ChartType;\n\t\n\t\t\t\t//Register this new chart type in the Chart prototype\n\t\t\t\tChart.prototype[chartName] = function(data,options){\n\t\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});\n\t\t\t\t\treturn new ChartType(data,config,this);\n\t\t\t\t};\n\t\t\t} else{\n\t\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");\n\t\t\t}\n\t\t\treturn parent;\n\t\t};\n\t\n\t\tChart.Element = function(configuration){\n\t\t\textend(this,configuration);\n\t\t\tthis.initialize.apply(this,arguments);\n\t\t\tthis.save();\n\t\t};\n\t\textend(Chart.Element.prototype,{\n\t\t\tinitialize : function(){},\n\t\t\trestore : function(props){\n\t\t\t\tif (!props){\n\t\t\t\t\textend(this,this._saved);\n\t\t\t\t} else {\n\t\t\t\t\teach(props,function(key){\n\t\t\t\t\t\tthis[key] = this._saved[key];\n\t\t\t\t\t},this);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tsave : function(){\n\t\t\t\tthis._saved = clone(this);\n\t\t\t\tdelete this._saved._saved;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tupdate : function(newProps){\n\t\t\t\teach(newProps,function(value,key){\n\t\t\t\t\tthis._saved[key] = this[key];\n\t\t\t\t\tthis[key] = value;\n\t\t\t\t},this);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\ttransition : function(props,ease){\n\t\t\t\teach(props,function(value,key){\n\t\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];\n\t\t\t\t},this);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\ttooltipPosition : function(){\n\t\t\t\treturn {\n\t\t\t\t\tx : this.x,\n\t\t\t\t\ty : this.y\n\t\t\t\t};\n\t\t\t},\n\t\t\thasValue: function(){\n\t\t\t\treturn isNumber(this.value);\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Element.extend = inherits;\n\t\n\t\n\t\tChart.Point = Chart.Element.extend({\n\t\t\tdisplay: true,\n\t\t\tinRange: function(chartX,chartY){\n\t\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;\n\t\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));\n\t\t\t},\n\t\t\tdraw : function(){\n\t\t\t\tif (this.display){\n\t\t\t\t\tvar ctx = this.ctx;\n\t\t\t\t\tctx.beginPath();\n\t\n\t\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\n\t\t\t\t\tctx.closePath();\n\t\n\t\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\t\tctx.lineWidth = this.strokeWidth;\n\t\n\t\t\t\t\tctx.fillStyle = this.fillColor;\n\t\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\n\t\n\t\t\t\t//Quick debug for bezier curve splining\n\t\t\t\t//Highlights control points and the line between them.\n\t\t\t\t//Handy for dev - stripped in the min version.\n\t\n\t\t\t\t// ctx.save();\n\t\t\t\t// ctx.fillStyle = \"black\";\n\t\t\t\t// ctx.strokeStyle = \"black\"\n\t\t\t\t// ctx.beginPath();\n\t\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);\n\t\t\t\t// ctx.fill();\n\t\n\t\t\t\t// ctx.beginPath();\n\t\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);\n\t\t\t\t// ctx.fill();\n\t\n\t\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);\n\t\t\t\t// ctx.lineTo(this.x, this.y);\n\t\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);\n\t\t\t\t// ctx.stroke();\n\t\n\t\t\t\t// ctx.restore();\n\t\n\t\n\t\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Arc = Chart.Element.extend({\n\t\t\tinRange : function(chartX,chartY){\n\t\n\t\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {\n\t\t\t\t\tx: chartX,\n\t\t\t\t\ty: chartY\n\t\t\t\t});\n\t\n\t\t\t\t// Normalize all angles to 0 - 2*PI (0 - 360°)\n\t\t\t\tvar pointRelativeAngle = pointRelativePosition.angle % (Math.PI * 2),\n\t\t\t\t    startAngle = (Math.PI * 2 + this.startAngle) % (Math.PI * 2),\n\t\t\t\t    endAngle = (Math.PI * 2 + this.endAngle) % (Math.PI * 2) || 360;\n\t\n\t\t\t\t// Calculate wether the pointRelativeAngle is between the start and the end angle\n\t\t\t\tvar betweenAngles = (endAngle < startAngle) ?\n\t\t\t\t\tpointRelativeAngle <= endAngle || pointRelativeAngle >= startAngle:\n\t\t\t\t\tpointRelativeAngle >= startAngle && pointRelativeAngle <= endAngle;\n\t\n\t\t\t\t//Check if within the range of the open/close angle\n\t\t\t\tvar withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\n\t\n\t\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t\t//Ensure within the outside of the arc centre, but inside arc outer\n\t\t\t},\n\t\t\ttooltipPosition : function(){\n\t\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),\n\t\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;\n\t\t\t\treturn {\n\t\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t\t};\n\t\t\t},\n\t\t\tdraw : function(animationPercent){\n\t\n\t\t\t\tvar easingDecimal = animationPercent || 1;\n\t\n\t\t\t\tvar ctx = this.ctx;\n\t\n\t\t\t\tctx.beginPath();\n\t\n\t\t\t\tctx.arc(this.x, this.y, this.outerRadius < 0 ? 0 : this.outerRadius, this.startAngle, this.endAngle);\n\t\n\t            ctx.arc(this.x, this.y, this.innerRadius < 0 ? 0 : this.innerRadius, this.endAngle, this.startAngle, true);\n\t\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\tctx.lineWidth = this.strokeWidth;\n\t\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\n\t\t\t\tctx.fill();\n\t\t\t\tctx.lineJoin = 'bevel';\n\t\n\t\t\t\tif (this.showStroke){\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Rectangle = Chart.Element.extend({\n\t\t\tdraw : function(){\n\t\t\t\tvar ctx = this.ctx,\n\t\t\t\t\thalfWidth = this.width/2,\n\t\t\t\t\tleftX = this.x - halfWidth,\n\t\t\t\t\trightX = this.x + halfWidth,\n\t\t\t\t\ttop = this.base - (this.base - this.y),\n\t\t\t\t\thalfStroke = this.strokeWidth / 2;\n\t\n\t\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\t\tif (this.showStroke){\n\t\t\t\t\tleftX += halfStroke;\n\t\t\t\t\trightX -= halfStroke;\n\t\t\t\t\ttop += halfStroke;\n\t\t\t\t}\n\t\n\t\t\t\tctx.beginPath();\n\t\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\tctx.lineWidth = this.strokeWidth;\n\t\n\t\t\t\t// It'd be nice to keep this class totally generic to any rectangle\n\t\t\t\t// and simply specify which border to miss out.\n\t\t\t\tctx.moveTo(leftX, this.base);\n\t\t\t\tctx.lineTo(leftX, top);\n\t\t\t\tctx.lineTo(rightX, top);\n\t\t\t\tctx.lineTo(rightX, this.base);\n\t\t\t\tctx.fill();\n\t\t\t\tif (this.showStroke){\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t},\n\t\t\theight : function(){\n\t\t\t\treturn this.base - this.y;\n\t\t\t},\n\t\t\tinRange : function(chartX,chartY){\n\t\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Animation = Chart.Element.extend({\n\t\t\tcurrentStep: null, // the current animation step\n\t\t\tnumSteps: 60, // default number of steps\n\t\t\teasing: \"\", // the easing to use for this animation\n\t\t\trender: null, // render function used by the animation service\n\t\t\t\n\t\t\tonAnimationProgress: null, // user specified callback to fire on each step of the animation \n\t\t\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n\t\t});\n\t\t\n\t\tChart.Tooltip = Chart.Element.extend({\n\t\t\tdraw : function(){\n\t\n\t\t\t\tvar ctx = this.chart.ctx;\n\t\n\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\n\t\t\t\tthis.xAlign = \"center\";\n\t\t\t\tthis.yAlign = \"above\";\n\t\n\t\t\t\t//Distance between the actual element.y position and the start of the tooltip caret\n\t\t\t\tvar caretPadding = this.caretPadding = 2;\n\t\n\t\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,\n\t\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,\n\t\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;\n\t\n\t\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){\n\t\t\t\t\tthis.xAlign = \"left\";\n\t\t\t\t} else if (this.x - tooltipWidth/2 < 0){\n\t\t\t\t\tthis.xAlign = \"right\";\n\t\t\t\t}\n\t\n\t\t\t\tif (this.y - tooltipHeight < 0){\n\t\t\t\t\tthis.yAlign = \"below\";\n\t\t\t\t}\n\t\n\t\n\t\t\t\tvar tooltipX = this.x - tooltipWidth/2,\n\t\t\t\t\ttooltipY = this.y - tooltipHeight;\n\t\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\n\t\t\t\t// Custom Tooltips\n\t\t\t\tif(this.custom){\n\t\t\t\t\tthis.custom(this);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tswitch(this.yAlign)\n\t\t\t\t\t{\n\t\t\t\t\tcase \"above\":\n\t\t\t\t\t\t//Draw a caret above the x/y\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);\n\t\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"below\":\n\t\t\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;\n\t\t\t\t\t\t//Draw a caret below the x/y\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);\n\t\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tswitch(this.xAlign)\n\t\t\t\t\t{\n\t\t\t\t\tcase \"left\":\n\t\t\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"right\":\n\t\t\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);\n\t\n\t\t\t\t\tctx.fill();\n\t\n\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tChart.MultiTooltip = Chart.Element.extend({\n\t\t\tinitialize : function(){\n\t\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\n\t\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);\n\t\n\t\t\t\tthis.titleHeight = this.title ? this.titleFontSize * 1.5 : 0;\n\t\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleHeight;\n\t\n\t\t\t\tthis.ctx.font = this.titleFont;\n\t\n\t\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,\n\t\t\t\t\t//Label has a legend square as well so account for this.\n\t\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,\n\t\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);\n\t\n\t\t\t\tthis.width = longestTextWidth + (this.xPadding*2);\n\t\n\t\n\t\t\t\tvar halfHeight = this.height/2;\n\t\n\t\t\t\t//Check to ensure the height will fit on the canvas\n\t\t\t\tif (this.y - halfHeight < 0 ){\n\t\t\t\t\tthis.y = halfHeight;\n\t\t\t\t} else if (this.y + halfHeight > this.chart.height){\n\t\t\t\t\tthis.y = this.chart.height - halfHeight;\n\t\t\t\t}\n\t\n\t\t\t\t//Decide whether to align left or right based on position on canvas\n\t\t\t\tif (this.x > this.chart.width/2){\n\t\t\t\t\tthis.x -= this.xOffset + this.width;\n\t\t\t\t} else {\n\t\t\t\t\tthis.x += this.xOffset;\n\t\t\t\t}\n\t\n\t\n\t\t\t},\n\t\t\tgetLineHeight : function(index){\n\t\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,\n\t\t\t\t\tafterTitleIndex = index-1;\n\t\n\t\t\t\t//If the index is zero, we're getting the title\n\t\t\t\tif (index === 0){\n\t\t\t\t\treturn baseLineHeight + this.titleHeight / 3;\n\t\t\t\t} else{\n\t\t\t\t\treturn baseLineHeight + ((this.fontSize * 1.5 * afterTitleIndex) + this.fontSize / 2) + this.titleHeight;\n\t\t\t\t}\n\t\n\t\t\t},\n\t\t\tdraw : function(){\n\t\t\t\t// Custom Tooltips\n\t\t\t\tif(this.custom){\n\t\t\t\t\tthis.custom(this);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);\n\t\t\t\t\tvar ctx = this.ctx;\n\t\t\t\t\tctx.fillStyle = this.fillColor;\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.closePath();\n\t\n\t\t\t\t\tctx.textAlign = \"left\";\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tctx.fillStyle = this.titleTextColor;\n\t\t\t\t\tctx.font = this.titleFont;\n\t\n\t\t\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));\n\t\n\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\thelpers.each(this.labels,function(label,index){\n\t\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));\n\t\n\t\t\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)\n\t\t\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\t\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.\n\t\n\t\t\t\t\t\tctx.fillStyle = this.legendColorBackground;\n\t\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\n\t\t\t\t\t\tctx.fillStyle = this.legendColors[index].fill;\n\t\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\n\t\n\t\t\t\t\t},this);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Scale = Chart.Element.extend({\n\t\t\tinitialize : function(){\n\t\t\t\tthis.fit();\n\t\t\t},\n\t\t\tbuildYLabels : function(){\n\t\t\t\tthis.yLabels = [];\n\t\n\t\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\t\n\t\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t\t}\n\t\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) + 10 : 0;\n\t\t\t},\n\t\t\taddXLabel : function(label){\n\t\t\t\tthis.xLabels.push(label);\n\t\t\t\tthis.valuesCount++;\n\t\t\t\tthis.fit();\n\t\t\t},\n\t\t\tremoveXLabel : function(){\n\t\t\t\tthis.xLabels.shift();\n\t\t\t\tthis.valuesCount--;\n\t\t\t\tthis.fit();\n\t\t\t},\n\t\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use\n\t\t\tfit: function(){\n\t\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated\n\t\n\t\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation\n\t\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;\n\t\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels\n\t\n\t\t\t\t// Apply padding settings to the start and end point.\n\t\t\t\tthis.startPoint += this.padding;\n\t\t\t\tthis.endPoint -= this.padding;\n\t\n\t\t\t\t// Cache the starting endpoint, excluding the space for x labels\n\t\t\t\tvar cachedEndPoint = this.endPoint;\n\t\n\t\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis\n\t\t\t\tvar cachedHeight = this.endPoint - this.startPoint,\n\t\t\t\t\tcachedYLabelWidth;\n\t\n\t\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start\n\t\t\t\t/*\n\t\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:\n\t\t\t\t *\n\t\t\t\t\tthis.steps;\n\t\t\t\t\tthis.stepValue;\n\t\t\t\t\tthis.min;\n\t\t\t\t\tthis.max;\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tthis.calculateYRange(cachedHeight);\n\t\n\t\t\t\t// With these properties set we can now build the array of yLabels\n\t\t\t\t// and also the width of the largest yLabel\n\t\t\t\tthis.buildYLabels();\n\t\n\t\t\t\tthis.calculateXLabelRotation();\n\t\n\t\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){\n\t\t\t\t\tcachedHeight = this.endPoint - this.startPoint;\n\t\t\t\t\tcachedYLabelWidth = this.yLabelWidth;\n\t\n\t\t\t\t\tthis.calculateYRange(cachedHeight);\n\t\t\t\t\tthis.buildYLabels();\n\t\n\t\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed\n\t\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){\n\t\t\t\t\t\tthis.endPoint = cachedEndPoint;\n\t\t\t\t\t\tthis.calculateXLabelRotation();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t},\n\t\t\tcalculateXLabelRotation : function(){\n\t\t\t\t//Get the width of each grid by calculating the difference\n\t\t\t\t//between x offsets between 0 and 1.\n\t\n\t\t\t\tthis.ctx.font = this.font;\n\t\n\t\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,\n\t\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,\n\t\t\t\t\tfirstRotated,\n\t\t\t\t\tlastRotated;\n\t\n\t\n\t\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;\n\t\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth) ? firstWidth/2 : this.yLabelWidth;\n\t\n\t\t\t\tthis.xLabelRotation = 0;\n\t\t\t\tif (this.display){\n\t\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),\n\t\t\t\t\t\tcosRotation,\n\t\t\t\t\t\tfirstRotatedWidth;\n\t\t\t\t\tthis.xLabelWidth = originalLabelWidth;\n\t\t\t\t\t//Allow 3 pixels x2 padding either side for label readability\n\t\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;\n\t\n\t\t\t\t\t//Max label rotate should be 90 - also act as a loop counter\n\t\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\n\t\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));\n\t\n\t\t\t\t\t\tfirstRotated = cosRotation * firstWidth;\n\t\t\t\t\t\tlastRotated = cosRotation * lastWidth;\n\t\n\t\t\t\t\t\t// We're right aligning the text now.\n\t\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth){\n\t\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;\n\t\n\t\n\t\t\t\t\t\tthis.xLabelRotation++;\n\t\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif (this.xLabelRotation > 0){\n\t\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.xLabelWidth = 0;\n\t\t\t\t\tthis.xScalePaddingRight = this.padding;\n\t\t\t\t\tthis.xScalePaddingLeft = this.padding;\n\t\t\t\t}\n\t\n\t\t\t},\n\t\t\t// Needs to be overidden in each Chart type\n\t\t\t// Otherwise we need to pass all the data into the scale class\n\t\t\tcalculateYRange: noop,\n\t\t\tdrawingArea: function(){\n\t\t\t\treturn this.startPoint - this.endPoint;\n\t\t\t},\n\t\t\tcalculateY : function(value){\n\t\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);\n\t\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));\n\t\t\t},\n\t\t\tcalculateX : function(index){\n\t\t\t\tvar isRotated = (this.xLabelRotation > 0),\n\t\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\n\t\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),\n\t\t\t\t\tvalueWidth = innerWidth/Math.max((this.valuesCount - ((this.offsetGridLines) ? 0 : 1)), 1),\n\t\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;\n\t\n\t\t\t\tif (this.offsetGridLines){\n\t\t\t\t\tvalueOffset += (valueWidth/2);\n\t\t\t\t}\n\t\n\t\t\t\treturn Math.round(valueOffset);\n\t\t\t},\n\t\t\tupdate : function(newProps){\n\t\t\t\thelpers.extend(this, newProps);\n\t\t\t\tthis.fit();\n\t\t\t},\n\t\t\tdraw : function(){\n\t\t\t\tvar ctx = this.ctx,\n\t\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,\n\t\t\t\t\txStart = Math.round(this.xScalePaddingLeft);\n\t\t\t\tif (this.display){\n\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\teach(this.yLabels,function(labelString,index){\n\t\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),\n\t\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter),\n\t\t\t\t\t\t\tdrawHorizontalLine = this.showHorizontalLines;\n\t\n\t\t\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\tif (this.showLabels){\n\t\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// This is X axis, so draw it\n\t\t\t\t\t\tif (index === 0 && !drawHorizontalLine){\n\t\t\t\t\t\t\tdrawHorizontalLine = true;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (drawHorizontalLine){\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);\n\t\n\t\t\t\t\t\tif(drawHorizontalLine){\n\t\t\t\t\t\t\tctx.moveTo(xStart, linePositionY);\n\t\t\t\t\t\t\tctx.lineTo(this.width, linePositionY);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);\n\t\t\t\t\t\tctx.lineTo(xStart, linePositionY);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\n\t\t\t\t\t},this);\n\t\n\t\t\t\t\teach(this.xLabels,function(label,index){\n\t\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line\n\t\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0),\n\t\t\t\t\t\t\tdrawVerticalLine = this.showVerticalLines;\n\t\n\t\t\t\t\t\t// This is Y axis, so draw it\n\t\t\t\t\t\tif (index === 0 && !drawVerticalLine){\n\t\t\t\t\t\t\tdrawVerticalLine = true;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\n\t\n\t\t\t\t\t\t// Small lines at the bottom of the base grid line\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\n\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);\n\t\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);\n\t\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";\n\t\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";\n\t\t\t\t\t\tctx.fillText(label, 0, 0);\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t},this);\n\t\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t});\n\t\n\t\tChart.RadialScale = Chart.Element.extend({\n\t\t\tinitialize: function(){\n\t\t\t\tthis.size = min([this.height, this.width]);\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t\t},\n\t\t\tcalculateCenterOffset: function(value){\n\t\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);\n\t\n\t\t\t\treturn (value - this.min) * scalingFactor;\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tif (!this.lineArc){\n\t\t\t\t\tthis.setScaleSize();\n\t\t\t\t} else {\n\t\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t\t\t}\n\t\t\t\tthis.buildYLabels();\n\t\t\t},\n\t\t\tbuildYLabels: function(){\n\t\t\t\tthis.yLabels = [];\n\t\n\t\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\t\n\t\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetCircumference : function(){\n\t\t\t\treturn ((Math.PI*2) / this.valuesCount);\n\t\t\t},\n\t\t\tsetScaleSize: function(){\n\t\t\t\t/*\n\t\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t\t *\n\t\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t\t *\n\t\t\t\t * Solution:\n\t\t\t\t *\n\t\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t\t * at each index we check if the text overlaps.\n\t\t\t\t *\n\t\t\t\t * Where it does, we store that angle and that index.\n\t\t\t\t *\n\t\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t\t *\n\t\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t\t * along with labels.\n\t\t\t\t *\n\t\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t\t *\n\t\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t\t * and position it in the most space efficient manner\n\t\t\t\t *\n\t\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t\t */\n\t\n\t\n\t\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),\n\t\t\t\t\tpointPosition,\n\t\t\t\t\ti,\n\t\t\t\t\ttextWidth,\n\t\t\t\t\thalfTextWidth,\n\t\t\t\t\tfurthestRight = this.width,\n\t\t\t\t\tfurthestRightIndex,\n\t\t\t\t\tfurthestRightAngle,\n\t\t\t\t\tfurthestLeft = 0,\n\t\t\t\t\tfurthestLeftIndex,\n\t\t\t\t\tfurthestLeftAngle,\n\t\t\t\t\txProtrusionLeft,\n\t\t\t\t\txProtrusionRight,\n\t\t\t\t\tradiusReductionRight,\n\t\t\t\t\tradiusReductionLeft,\n\t\t\t\t\tmaxWidthRadius;\n\t\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\t\tfor (i=0;i<this.valuesCount;i++){\n\t\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\n\t\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\n\t\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;\n\t\t\t\t\tif (i === 0 || i === this.valuesCount/2){\n\t\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom\n\t\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\n\t\t\t\t\t\t// w/left and right text sizes\n\t\t\t\t\t\thalfTextWidth = textWidth/2;\n\t\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\n\t\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\n\t\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\n\t\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\n\t\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (i < this.valuesCount/2) {\n\t\t\t\t\t\t// Less than half the values means we'll left align the text\n\t\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\n\t\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\n\t\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (i > this.valuesCount/2){\n\t\t\t\t\t\t// More than half the values means we'll right align the text\n\t\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {\n\t\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\n\t\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\txProtrusionLeft = furthestLeft;\n\t\n\t\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\n\t\n\t\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\n\t\n\t\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\n\t\n\t\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);\n\t\n\t\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);\n\t\n\t\t\t\t// Ensure we actually need to reduce the size of the chart\n\t\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\n\t\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\n\t\n\t\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;\n\t\n\t\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])\n\t\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\n\t\n\t\t\t},\n\t\t\tsetCenterPoint: function(leftMovement, rightMovement){\n\t\n\t\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,\n\t\t\t\t\tmaxLeft = leftMovement + this.drawingArea;\n\t\n\t\t\t\tthis.xCenter = (maxLeft + maxRight)/2;\n\t\t\t\t// Always vertically in the centre as the text height doesn't change\n\t\t\t\tthis.yCenter = (this.height/2);\n\t\t\t},\n\t\n\t\t\tgetIndexAngle : function(index){\n\t\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;\n\t\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\n\t\t\t\treturn index * angleMultiplier - (Math.PI/2);\n\t\t\t},\n\t\t\tgetPointPosition : function(index, distanceFromCenter){\n\t\t\t\tvar thisAngle = this.getIndexAngle(index);\n\t\t\t\treturn {\n\t\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,\n\t\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter\n\t\t\t\t};\n\t\t\t},\n\t\t\tdraw: function(){\n\t\t\t\tif (this.display){\n\t\t\t\t\tvar ctx = this.ctx;\n\t\t\t\t\teach(this.yLabels, function(label, index){\n\t\t\t\t\t\t// Don't draw a centre value\n\t\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),\n\t\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,\n\t\t\t\t\t\t\t\tpointPosition;\n\t\n\t\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\t\tif (this.lineWidth > 0){\n\t\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\n\t\t\t\t\t\t\t\tif(this.lineArc){\n\t\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);\n\t\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));\n\t\t\t\t\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this.showLabels){\n\t\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\t\t\t\t\t\t\tif (this.showLabelBackdrop){\n\t\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;\n\t\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,\n\t\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,\n\t\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,\n\t\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;\n\t\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\n\t\t\t\t\tif (!this.lineArc){\n\t\t\t\t\t\tctx.lineWidth = this.angleLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.angleLineColor;\n\t\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tvar centerOffset = null, outerPosition = null;\n\t\n\t\t\t\t\t\t\tif (this.angleLineWidth > 0 && (i % this.angleLineInterval === 0)){\n\t\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\t\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif (this.backgroundColors && this.backgroundColors.length == this.valuesCount) {\n\t\t\t\t\t\t\t\tif (centerOffset == null)\n\t\t\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\t\n\t\t\t\t\t\t\t\tif (outerPosition == null)\n\t\t\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\t\n\t\t\t\t\t\t\t\tvar previousOuterPosition = this.getPointPosition(i === 0 ? this.valuesCount - 1 : i - 1, centerOffset);\n\t\t\t\t\t\t\t\tvar nextOuterPosition = this.getPointPosition(i === this.valuesCount - 1 ? 0 : i + 1, centerOffset);\n\t\n\t\t\t\t\t\t\t\tvar previousOuterHalfway = { x: (previousOuterPosition.x + outerPosition.x) / 2, y: (previousOuterPosition.y + outerPosition.y) / 2 };\n\t\t\t\t\t\t\t\tvar nextOuterHalfway = { x: (outerPosition.x + nextOuterPosition.x) / 2, y: (outerPosition.y + nextOuterPosition.y) / 2 };\n\t\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\t\tctx.lineTo(previousOuterHalfway.x, previousOuterHalfway.y);\n\t\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\t\tctx.lineTo(nextOuterHalfway.x, nextOuterHalfway.y);\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backgroundColors[i];\n\t\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);\n\t\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;\n\t\n\t\t\t\t\t\t\tvar labelsCount = this.labels.length,\n\t\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,\n\t\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,\n\t\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),\n\t\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);\n\t\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t} else if(i === halfLabelsCount){\n\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t} else if (i < halfLabelsCount){\n\t\t\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\n\t\t\t\t\t\t\tif (exactQuarter){\n\t\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\t} else if (upperHalf){\n\t\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tChart.animationService = {\n\t\t\tframeDuration: 17,\n\t\t\tanimations: [],\n\t\t\tdropFrames: 0,\n\t\t\taddAnimation: function(chartInstance, animationObject) {\n\t\t\t\tfor (var index = 0; index < this.animations.length; ++ index){\n\t\t\t\t\tif (this.animations[index].chartInstance === chartInstance){\n\t\t\t\t\t\t// replacing an in progress animation\n\t\t\t\t\t\tthis.animations[index].animationObject = animationObject;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.animations.push({\n\t\t\t\t\tchartInstance: chartInstance,\n\t\t\t\t\tanimationObject: animationObject\n\t\t\t\t});\n\t\n\t\t\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\t\t\tif (this.animations.length == 1) {\n\t\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// Cancel the animation for a given chart instance\n\t\t\tcancelAnimation: function(chartInstance) {\n\t\t\t\tvar index = helpers.findNextWhere(this.animations, function(animationWrapper) {\n\t\t\t\t\treturn animationWrapper.chartInstance === chartInstance;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (index)\n\t\t\t\t{\n\t\t\t\t\tthis.animations.splice(index, 1);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// calls startDigest with the proper context\n\t\t\tdigestWrapper: function() {\n\t\t\t\tChart.animationService.startDigest.call(Chart.animationService);\n\t\t\t},\n\t\t\tstartDigest: function() {\n\t\n\t\t\t\tvar startTime = Date.now();\n\t\t\t\tvar framesToDrop = 0;\n\t\n\t\t\t\tif(this.dropFrames > 1){\n\t\t\t\t\tframesToDrop = Math.floor(this.dropFrames);\n\t\t\t\t\tthis.dropFrames -= framesToDrop;\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i = 0; i < this.animations.length; i++) {\n\t\n\t\t\t\t\tif (this.animations[i].animationObject.currentStep === null){\n\t\t\t\t\t\tthis.animations[i].animationObject.currentStep = 0;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\t\t\t\t\tif(this.animations[i].animationObject.currentStep > this.animations[i].animationObject.numSteps){\n\t\t\t\t\t\tthis.animations[i].animationObject.currentStep = this.animations[i].animationObject.numSteps;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.animations[i].animationObject.render(this.animations[i].chartInstance, this.animations[i].animationObject);\n\t\t\t\t\t\n\t\t\t\t\t// Check if executed the last frame.\n\t\t\t\t\tif (this.animations[i].animationObject.currentStep == this.animations[i].animationObject.numSteps){\n\t\t\t\t\t\t// Call onAnimationComplete\n\t\t\t\t\t\tthis.animations[i].animationObject.onAnimationComplete.call(this.animations[i].chartInstance);\n\t\t\t\t\t\t// Remove the animation.\n\t\t\t\t\t\tthis.animations.splice(i, 1);\n\t\t\t\t\t\t// Keep the index in place to offset the splice\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar endTime = Date.now();\n\t\t\t\tvar delay = endTime - startTime - this.frameDuration;\n\t\t\t\tvar frameDelay = delay / this.frameDuration;\n\t\n\t\t\t\tif(frameDelay > 1){\n\t\t\t\t\tthis.dropFrames += frameDelay;\n\t\t\t\t}\n\t\n\t\t\t\t// Do we have more stuff to animate?\n\t\t\t\tif (this.animations.length > 0){\n\t\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Attach global event to resize each chart instance when the browser resizes\n\t\thelpers.addEvent(window, \"resize\", (function(){\n\t\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.\n\t\t\tvar timeout;\n\t\t\treturn function(){\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(function(){\n\t\t\t\t\teach(Chart.instances,function(instance){\n\t\t\t\t\t\t// If the responsive flag is set in the chart instance config\n\t\t\t\t\t\t// Cascade the resize event down to the chart.\n\t\t\t\t\t\tif (instance.options.responsive){\n\t\t\t\t\t\t\tinstance.resize(instance.render, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 50);\n\t\t\t};\n\t\t})());\n\t\n\t\n\t\tif (amd) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\t\t\t\treturn Chart;\n\t\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof module === 'object' && module.exports) {\n\t\t\tmodule.exports = Chart;\n\t\t}\n\t\n\t\troot.Chart = Chart;\n\t\n\t\tChart.noConflict = function(){\n\t\t\troot.Chart = previous;\n\t\t\treturn Chart;\n\t\t};\n\t\n\t}).call(this);\n\t\n\t(function(){\n\t\t\"use strict\";\n\t\n\t\tvar root = this,\n\t\t\tChart = root.Chart,\n\t\t\thelpers = Chart.helpers;\n\t\n\t\n\t\tvar defaultConfig = {\n\t\t\t//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\t\tscaleBeginAtZero : true,\n\t\n\t\t\t//Boolean - Whether grid lines are shown across the chart\n\t\t\tscaleShowGridLines : true,\n\t\n\t\t\t//String - Colour of the grid lines\n\t\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\t\n\t\t\t//Number - Width of the grid lines\n\t\t\tscaleGridLineWidth : 1,\n\t\n\t\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\t\tscaleShowHorizontalLines: true,\n\t\n\t\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\t\tscaleShowVerticalLines: true,\n\t\n\t\t\t//Boolean - If there is a stroke on each bar\n\t\t\tbarShowStroke : true,\n\t\n\t\t\t//Number - Pixel width of the bar stroke\n\t\t\tbarStrokeWidth : 2,\n\t\n\t\t\t//Number - Spacing between each of the X value sets\n\t\t\tbarValueSpacing : 5,\n\t\n\t\t\t//Number - Spacing between data sets within X values\n\t\t\tbarDatasetSpacing : 1,\n\t\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\"\n\t\n\t\t};\n\t\n\t\n\t\tChart.Type.extend({\n\t\t\tname: \"Bar\",\n\t\t\tdefaults : defaultConfig,\n\t\t\tinitialize:  function(data){\n\t\n\t\t\t\t//Expose options as a scope variable here so we can access it in the ScaleClass\n\t\t\t\tvar options = this.options;\n\t\n\t\t\t\tthis.ScaleClass = Chart.Scale.extend({\n\t\t\t\t\toffsetGridLines : true,\n\t\t\t\t\tcalculateBarX : function(datasetCount, datasetIndex, barIndex){\n\t\t\t\t\t\t//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar\n\t\t\t\t\t\tvar xWidth = this.calculateBaseWidth(),\n\t\t\t\t\t\t\txAbsolute = this.calculateX(barIndex) - (xWidth/2),\n\t\t\t\t\t\t\tbarWidth = this.calculateBarWidth(datasetCount);\n\t\n\t\t\t\t\t\treturn xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;\n\t\t\t\t\t},\n\t\t\t\t\tcalculateBaseWidth : function(){\n\t\t\t\t\t\treturn (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);\n\t\t\t\t\t},\n\t\t\t\t\tcalculateBarWidth : function(datasetCount){\n\t\t\t\t\t\t//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset\n\t\t\t\t\t\tvar baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);\n\t\n\t\t\t\t\t\treturn (baseWidth / datasetCount);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tthis.datasets = [];\n\t\n\t\t\t\t//Set up tooltip events on the chart\n\t\t\t\tif (this.options.showTooltips){\n\t\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\t\tvar activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];\n\t\n\t\t\t\t\t\tthis.eachBars(function(bar){\n\t\t\t\t\t\t\tbar.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thelpers.each(activeBars, function(activeBar){\n\t\t\t\t\t\t\tif (activeBar) {\n\t\t\t\t\t\t\t\tactiveBar.fillColor = activeBar.highlightFill;\n\t\t\t\t\t\t\t\tactiveBar.strokeColor = activeBar.highlightStroke;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.showTooltip(activeBars);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\t\tthis.BarClass = Chart.Rectangle.extend({\n\t\t\t\t\tstrokeWidth : this.options.barStrokeWidth,\n\t\t\t\t\tshowStroke : this.options.barShowStroke,\n\t\t\t\t\tctx : this.chart.ctx\n\t\t\t\t});\n\t\n\t\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\t\thelpers.each(data.datasets,function(dataset,datasetIndex){\n\t\n\t\t\t\t\tvar datasetObject = {\n\t\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\t\tbars : []\n\t\t\t\t\t};\n\t\n\t\t\t\t\tthis.datasets.push(datasetObject);\n\t\n\t\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\t\tdatasetObject.bars.push(new this.BarClass({\n\t\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\t\tstrokeColor : (typeof dataset.strokeColor == 'object') ? dataset.strokeColor[index] : dataset.strokeColor,\n\t\t\t\t\t\t\tfillColor : (typeof dataset.fillColor == 'object') ? dataset.fillColor[index] : dataset.fillColor,\n\t\t\t\t\t\t\thighlightFill : (dataset.highlightFill) ? (typeof dataset.highlightFill == 'object') ? dataset.highlightFill[index] : dataset.highlightFill : (typeof dataset.fillColor == 'object') ? dataset.fillColor[index] : dataset.fillColor,\n\t\t\t\t\t\t\thighlightStroke : (dataset.highlightStroke) ? (typeof dataset.highlightStroke == 'object') ? dataset.highlightStroke[index] : dataset.highlightStroke : (typeof dataset.strokeColor == 'object') ? dataset.strokeColor[index] : dataset.strokeColor\n\t\t\t\t\t\t}));\n\t\t\t\t\t},this);\n\t\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.buildScale(data.labels);\n\t\n\t\t\t\tthis.BarClass.prototype.base = this.scale.endPoint;\n\t\n\t\t\t\tthis.eachBars(function(bar, index, datasetIndex){\n\t\t\t\t\thelpers.extend(bar, {\n\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t\t});\n\t\t\t\t\tbar.save();\n\t\t\t\t}, this);\n\t\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tthis.scale.update();\n\t\t\t\t// Reset any highlight colours before updating.\n\t\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t\t});\n\t\n\t\t\t\tthis.eachBars(function(bar){\n\t\t\t\t\tbar.save();\n\t\t\t\t});\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\teachBars : function(callback){\n\t\t\t\thelpers.each(this.datasets,function(dataset, datasetIndex){\n\t\t\t\t\thelpers.each(dataset.bars, callback, this, datasetIndex);\n\t\t\t\t},this);\n\t\t\t},\n\t\t\tgetBarsAtEvent : function(e){\n\t\t\t\tvar barsArray = [],\n\t\t\t\t\teventPosition = helpers.getRelativePosition(e),\n\t\t\t\t\tdatasetIterator = function(dataset){\n\t\t\t\t\t\tbarsArray.push(dataset.bars[barIndex]);\n\t\t\t\t\t},\n\t\t\t\t\tbarIndex;\n\t\n\t\t\t\tfor (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {\n\t\t\t\t\tfor (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {\n\t\t\t\t\t\tif (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){\n\t\t\t\t\t\t\thelpers.each(this.datasets, datasetIterator);\n\t\t\t\t\t\t\treturn barsArray;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn barsArray;\n\t\t\t},\n\t\t\tbuildScale : function(labels){\n\t\t\t\tvar self = this;\n\t\n\t\t\t\tvar dataTotal = function(){\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tself.eachBars(function(bar){\n\t\t\t\t\t\tvalues.push(bar.value);\n\t\t\t\t\t});\n\t\t\t\t\treturn values;\n\t\t\t\t};\n\t\n\t\t\t\tvar scaleOptions = {\n\t\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\t\theight : this.chart.height,\n\t\t\t\t\twidth : this.chart.width,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\t\tvaluesCount : labels.length,\n\t\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\t\tcalculateYRange: function(currentHeight){\n\t\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t\t);\n\t\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t\t},\n\t\t\t\t\txLabels : labels,\n\t\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\t\tpadding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,\n\t\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\t\tdisplay : this.options.showScale\n\t\t\t\t};\n\t\n\t\t\t\tif (this.options.scaleOverride){\n\t\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tthis.scale = new this.ScaleClass(scaleOptions);\n\t\t\t},\n\t\t\taddData : function(valuesArray,label){\n\t\t\t\t//Map the values array for each of the datasets\n\t\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tthis.datasets[datasetIndex].bars.push(new this.BarClass({\n\t\t\t\t\t\tvalue : value,\n\t\t\t\t\t\tlabel : label,\n\t\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),\n\t\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\t\tbase : this.scale.endPoint,\n\t\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].strokeColor,\n\t\t\t\t\t\tfillColor : this.datasets[datasetIndex].fillColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.scale.addXLabel(label);\n\t\t\t\t//Then re-render the chart.\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\tremoveData : function(){\n\t\t\t\tthis.scale.removeXLabel();\n\t\t\t\t//Then re-render the chart.\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\tdataset.bars.shift();\n\t\t\t\t},this);\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\treflow : function(){\n\t\t\t\thelpers.extend(this.BarClass.prototype,{\n\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\tbase : this.scale.endPoint\n\t\t\t\t});\n\t\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\t\theight : this.chart.height,\n\t\t\t\t\twidth : this.chart.width\n\t\t\t\t});\n\t\t\t\tthis.scale.update(newScaleProps);\n\t\t\t},\n\t\t\tdraw : function(ease){\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\tthis.clear();\n\t\n\t\t\t\tvar ctx = this.chart.ctx;\n\t\n\t\t\t\tthis.scale.draw(easingDecimal);\n\t\n\t\t\t\t//Draw all the bars for each dataset\n\t\t\t\thelpers.each(this.datasets,function(dataset,datasetIndex){\n\t\t\t\t\thelpers.each(dataset.bars,function(bar,index){\n\t\t\t\t\t\tif (bar.hasValue()){\n\t\t\t\t\t\t\tbar.base = this.scale.endPoint;\n\t\t\t\t\t\t\t//Transition then draw\n\t\t\t\t\t\t\tbar.transition({\n\t\t\t\t\t\t\t\tx : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\t\t\t\ty : this.scale.calculateY(bar.value),\n\t\t\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length)\n\t\t\t\t\t\t\t}, easingDecimal).draw();\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\n\t\t\t\t},this);\n\t\t\t}\n\t\t});\n\t\n\t\n\t}).call(this);\n\t\n\t(function(){\n\t\t\"use strict\";\n\t\n\t\tvar root = this,\n\t\t\tChart = root.Chart,\n\t\t\t//Cache a local reference to Chart.helpers\n\t\t\thelpers = Chart.helpers;\n\t\n\t\tvar defaultConfig = {\n\t\t\t//Boolean - Whether we should show a stroke on each segment\n\t\t\tsegmentShowStroke : true,\n\t\n\t\t\t//String - The colour of each segment stroke\n\t\t\tsegmentStrokeColor : \"#fff\",\n\t\n\t\t\t//Number - The width of each segment stroke\n\t\t\tsegmentStrokeWidth : 2,\n\t\n\t\t\t//The percentage of the chart that we cut out of the middle.\n\t\t\tpercentageInnerCutout : 50,\n\t\n\t\t\t//Number - Amount of animation steps\n\t\t\tanimationSteps : 100,\n\t\n\t\t\t//String - Animation easing effect\n\t\t\tanimationEasing : \"easeOutBounce\",\n\t\n\t\t\t//Boolean - Whether we animate the rotation of the Doughnut\n\t\t\tanimateRotate : true,\n\t\n\t\t\t//Boolean - Whether we animate scaling the Doughnut from the centre\n\t\t\tanimateScale : false,\n\t\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>\"\n\t\n\t\t};\n\t\n\t\tChart.Type.extend({\n\t\t\t//Passing in a name registers this chart in the Chart namespace\n\t\t\tname: \"Doughnut\",\n\t\t\t//Providing a defaults will also register the defaults in the chart namespace\n\t\t\tdefaults : defaultConfig,\n\t\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\t\tinitialize:  function(data){\n\t\n\t\t\t\t//Declare segments as a static property to prevent inheriting across the Chart type prototype\n\t\t\t\tthis.segments = [];\n\t\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\t\n\t\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\tx : this.chart.width/2,\n\t\t\t\t\ty : this.chart.height/2\n\t\t\t\t});\n\t\n\t\t\t\t//Set up tooltip events on the chart\n\t\t\t\tif (this.options.showTooltips){\n\t\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\t\n\t\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.calculateTotal(data);\n\t\n\t\t\t\thelpers.each(data,function(datapoint, index){\n\t\t\t\t\tif (!datapoint.color) {\n\t\t\t\t\t\tdatapoint.color = 'hsl(' + (360 * index / data.length) + ', 100%, 50%)';\n\t\t\t\t\t}\n\t\t\t\t\tthis.addData(datapoint, index, true);\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\tgetSegmentsAtEvent : function(e){\n\t\t\t\tvar segmentsArray = [];\n\t\n\t\t\t\tvar location = helpers.getRelativePosition(e);\n\t\n\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t\t},this);\n\t\t\t\treturn segmentsArray;\n\t\t\t},\n\t\t\taddData : function(segment, atIndex, silent){\n\t\t\t\tvar index = atIndex !== undefined ? atIndex : this.segments.length;\n\t\t\t\tif ( typeof(segment.color) === \"undefined\" ) {\n\t\t\t\t\tsegment.color = Chart.defaults.global.segmentColorDefault[index % Chart.defaults.global.segmentColorDefault.length];\n\t\t\t\t\tsegment.highlight = Chart.defaults.global.segmentHighlightColorDefaults[index % Chart.defaults.global.segmentHighlightColorDefaults.length];\t\t\t\t\n\t\t\t\t}\n\t\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\t\tvalue : segment.value,\n\t\t\t\t\touterRadius : (this.options.animateScale) ? 0 : this.outerRadius,\n\t\t\t\t\tinnerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,\n\t\t\t\t\tfillColor : segment.color,\n\t\t\t\t\thighlightColor : segment.highlight || segment.color,\n\t\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\t\tstartAngle : Math.PI * 1.5,\n\t\t\t\t\tcircumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),\n\t\t\t\t\tlabel : segment.label\n\t\t\t\t}));\n\t\t\t\tif (!silent){\n\t\t\t\t\tthis.reflow();\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcalculateCircumference : function(value) {\n\t\t\t\tif ( this.total > 0 ) {\n\t\t\t\t\treturn (Math.PI*2)*(value / this.total);\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t},\n\t\t\tcalculateTotal : function(data){\n\t\t\t\tthis.total = 0;\n\t\t\t\thelpers.each(data,function(segment){\n\t\t\t\t\tthis.total += Math.abs(segment.value);\n\t\t\t\t},this);\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tthis.calculateTotal(this.segments);\n\t\n\t\t\t\t// Reset any highlight colours before updating.\n\t\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\t\tactiveElement.restore(['fillColor']);\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\tsegment.save();\n\t\t\t\t});\n\t\t\t\tthis.render();\n\t\t\t},\n\t\n\t\t\tremoveData: function(atIndex){\n\t\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t},\n\t\n\t\t\treflow : function(){\n\t\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\t\tx : this.chart.width/2,\n\t\t\t\t\ty : this.chart.height/2\n\t\t\t\t});\n\t\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\t\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\t\tsegment.update({\n\t\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t\t});\n\t\t\t\t}, this);\n\t\t\t},\n\t\t\tdraw : function(easeDecimal){\n\t\t\t\tvar animDecimal = (easeDecimal) ? easeDecimal : 1;\n\t\t\t\tthis.clear();\n\t\t\t\thelpers.each(this.segments,function(segment,index){\n\t\t\t\t\tsegment.transition({\n\t\t\t\t\t\tcircumference : this.calculateCircumference(segment.value),\n\t\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t\t},animDecimal);\n\t\n\t\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\t\n\t\t\t\t\tsegment.draw();\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t\t}\n\t\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\t\tif (index < this.segments.length-1){\n\t\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t\t}\n\t\t\t\t},this);\n\t\n\t\t\t}\n\t\t});\n\t\n\t\tChart.types.Doughnut.extend({\n\t\t\tname : \"Pie\",\n\t\t\tdefaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})\n\t\t});\n\t\n\t}).call(this);\n\t\n\t(function(){\n\t\t\"use strict\";\n\t\n\t\tvar root = this,\n\t\t\tChart = root.Chart,\n\t\t\thelpers = Chart.helpers;\n\t\n\t\tvar defaultConfig = {\n\t\n\t\t\t///Boolean - Whether grid lines are shown across the chart\n\t\t\tscaleShowGridLines : true,\n\t\n\t\t\t//String - Colour of the grid lines\n\t\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\t\n\t\t\t//Number - Width of the grid lines\n\t\t\tscaleGridLineWidth : 1,\n\t\n\t\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\t\tscaleShowHorizontalLines: true,\n\t\n\t\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\t\tscaleShowVerticalLines: true,\n\t\n\t\t\t//Boolean - Whether the line is curved between points\n\t\t\tbezierCurve : true,\n\t\n\t\t\t//Number - Tension of the bezier curve between points\n\t\t\tbezierCurveTension : 0.4,\n\t\n\t\t\t//Boolean - Whether to show a dot for each point\n\t\t\tpointDot : true,\n\t\n\t\t\t//Number - Radius of each point dot in pixels\n\t\t\tpointDotRadius : 4,\n\t\n\t\t\t//Number - Pixel width of point dot stroke\n\t\t\tpointDotStrokeWidth : 1,\n\t\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\t\tpointHitDetectionRadius : 20,\n\t\n\t\t\t//Boolean - Whether to show a stroke for datasets\n\t\t\tdatasetStroke : true,\n\t\n\t\t\t//Number - Pixel width of dataset stroke\n\t\t\tdatasetStrokeWidth : 2,\n\t\n\t\t\t//Boolean - Whether to fill the dataset with a colour\n\t\t\tdatasetFill : true,\n\t\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\",\n\t\n\t\t\t//Boolean - Whether to horizontally center the label and point dot inside the grid\n\t\t\toffsetGridLines : false\n\t\n\t\t};\n\t\n\t\n\t\tChart.Type.extend({\n\t\t\tname: \"Line\",\n\t\t\tdefaults : defaultConfig,\n\t\t\tinitialize:  function(data){\n\t\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\t\toffsetGridLines : this.options.offsetGridLines,\n\t\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\tinRange : function(mouseX){\n\t\t\t\t\t\treturn (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tthis.datasets = [];\n\t\n\t\t\t\t//Set up tooltip events on the chart\n\t\t\t\tif (this.options.showTooltips){\n\t\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\t\tvar activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\t\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thelpers.each(activePoints, function(activePoint){\n\t\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.showTooltip(activePoints);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\t\thelpers.each(data.datasets,function(dataset){\n\t\n\t\t\t\t\tvar datasetObject = {\n\t\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tpoints : []\n\t\t\t\t\t};\n\t\n\t\t\t\t\tthis.datasets.push(datasetObject);\n\t\n\t\n\t\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t\t}));\n\t\t\t\t\t},this);\n\t\n\t\t\t\t\tthis.buildScale(data.labels);\n\t\n\t\n\t\t\t\t\tthis.eachPoints(function(point, index){\n\t\t\t\t\t\thelpers.extend(point, {\n\t\t\t\t\t\t\tx: this.scale.calculateX(index),\n\t\t\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpoint.save();\n\t\t\t\t\t}, this);\n\t\n\t\t\t\t},this);\n\t\n\t\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tthis.scale.update();\n\t\t\t\t// Reset any highlight colours before updating.\n\t\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t\t});\n\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\tpoint.save();\n\t\t\t\t});\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\teachPoints : function(callback){\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t\t},this);\n\t\t\t},\n\t\t\tgetPointsAtEvent : function(e){\n\t\t\t\tvar pointsArray = [],\n\t\t\t\t\teventPosition = helpers.getRelativePosition(e);\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\t\tif (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);\n\t\t\t\t\t});\n\t\t\t\t},this);\n\t\t\t\treturn pointsArray;\n\t\t\t},\n\t\t\tbuildScale : function(labels){\n\t\t\t\tvar self = this;\n\t\n\t\t\t\tvar dataTotal = function(){\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tself.eachPoints(function(point){\n\t\t\t\t\t\tvalues.push(point.value);\n\t\t\t\t\t});\n\t\n\t\t\t\t\treturn values;\n\t\t\t\t};\n\t\n\t\t\t\tvar scaleOptions = {\n\t\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\t\theight : this.chart.height,\n\t\t\t\t\twidth : this.chart.width,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\t\toffsetGridLines : this.options.offsetGridLines,\n\t\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\t\tvaluesCount : labels.length,\n\t\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\t\tcalculateYRange : function(currentHeight){\n\t\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t\t);\n\t\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t\t},\n\t\t\t\t\txLabels : labels,\n\t\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\t\tpadding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,\n\t\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\t\tdisplay : this.options.showScale\n\t\t\t\t};\n\t\n\t\t\t\tif (this.options.scaleOverride){\n\t\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\n\t\t\t\tthis.scale = new Chart.Scale(scaleOptions);\n\t\t\t},\n\t\t\taddData : function(valuesArray,label){\n\t\t\t\t//Map the values array for each of the datasets\n\t\n\t\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : value,\n\t\t\t\t\t\tlabel : label,\n\t\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\t\tx: this.scale.calculateX(this.scale.valuesCount+1),\n\t\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.scale.addXLabel(label);\n\t\t\t\t//Then re-render the chart.\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\tremoveData : function(){\n\t\t\t\tthis.scale.removeXLabel();\n\t\t\t\t//Then re-render the chart.\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\tdataset.points.shift();\n\t\t\t\t},this);\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\treflow : function(){\n\t\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\t\theight : this.chart.height,\n\t\t\t\t\twidth : this.chart.width\n\t\t\t\t});\n\t\t\t\tthis.scale.update(newScaleProps);\n\t\t\t},\n\t\t\tdraw : function(ease){\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\tthis.clear();\n\t\n\t\t\t\tvar ctx = this.chart.ctx;\n\t\n\t\t\t\t// Some helper methods for getting the next/prev points\n\t\t\t\tvar hasValue = function(item){\n\t\t\t\t\treturn item.value !== null;\n\t\t\t\t},\n\t\t\t\tnextPoint = function(point, collection, index){\n\t\t\t\t\treturn helpers.findNextWhere(collection, hasValue, index) || point;\n\t\t\t\t},\n\t\t\t\tpreviousPoint = function(point, collection, index){\n\t\t\t\t\treturn helpers.findPreviousWhere(collection, hasValue, index) || point;\n\t\t\t\t};\n\t\n\t\t\t\tif (!this.scale) return;\n\t\t\t\tthis.scale.draw(easingDecimal);\n\t\n\t\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\tvar pointsWithValues = helpers.where(dataset.points, hasValue);\n\t\n\t\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\t\t//We can use this extra loop to calculate the control points of this dataset also in this loop\n\t\n\t\t\t\t\thelpers.each(dataset.points, function(point, index){\n\t\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\t\tpoint.transition({\n\t\t\t\t\t\t\t\ty : this.scale.calculateY(point.value),\n\t\t\t\t\t\t\t\tx : this.scale.calculateX(index)\n\t\t\t\t\t\t\t}, easingDecimal);\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\n\t\n\t\t\t\t\t// Control points need to be calculated in a separate loop, because we need to know the current x/y of the point\n\t\t\t\t\t// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed\n\t\t\t\t\tif (this.options.bezierCurve){\n\t\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\t\t\tvar tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;\n\t\t\t\t\t\t\tpoint.controlPoints = helpers.splineCurve(\n\t\t\t\t\t\t\t\tpreviousPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\t\tpoint,\n\t\t\t\t\t\t\t\tnextPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\t\ttension\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\n\t\t\t\t\t\t\t// Cap puter bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\t\tif (point.controlPoints.outer.y > this.scale.endPoint){\n\t\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.endPoint;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (point.controlPoints.outer.y < this.scale.startPoint){\n\t\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.startPoint;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Cap inner bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\t\tif (point.controlPoints.inner.y > this.scale.endPoint){\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.endPoint;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (point.controlPoints.inner.y < this.scale.startPoint){\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.startPoint;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},this);\n\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t//Draw the line between all the points\n\t\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\t\tctx.beginPath();\n\t\n\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\t\tctx.moveTo(point.x, point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(this.options.bezierCurve){\n\t\t\t\t\t\t\t\tvar previous = previousPoint(point, pointsWithValues, index);\n\t\n\t\t\t\t\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\t\t\t\t\tprevious.controlPoints.outer.x,\n\t\t\t\t\t\t\t\t\tprevious.controlPoints.outer.y,\n\t\t\t\t\t\t\t\t\tpoint.controlPoints.inner.x,\n\t\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y,\n\t\t\t\t\t\t\t\t\tpoint.x,\n\t\t\t\t\t\t\t\t\tpoint.y\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\n\t\t\t\t\tif (this.options.datasetStroke) {\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (this.options.datasetFill && pointsWithValues.length > 0){\n\t\t\t\t\t\t//Round off the line by going to the base of the chart, back to the start, then fill.\n\t\t\t\t\t\tctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);\n\t\t\t\t\t\tctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);\n\t\t\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//Now draw the points over the line\n\t\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t\t//lagging behind the point positions\n\t\t\t\t\thelpers.each(pointsWithValues,function(point){\n\t\t\t\t\t\tpoint.draw();\n\t\t\t\t\t});\n\t\t\t\t},this);\n\t\t\t}\n\t\t});\n\t\n\t\n\t}).call(this);\n\t\n\t(function(){\n\t\t\"use strict\";\n\t\n\t\tvar root = this,\n\t\t\tChart = root.Chart,\n\t\t\t//Cache a local reference to Chart.helpers\n\t\t\thelpers = Chart.helpers;\n\t\n\t\tvar defaultConfig = {\n\t\t\t//Boolean - Show a backdrop to the scale label\n\t\t\tscaleShowLabelBackdrop : true,\n\t\n\t\t\t//String - The colour of the label backdrop\n\t\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\n\t\n\t\t\t// Boolean - Whether the scale should begin at zero\n\t\t\tscaleBeginAtZero : true,\n\t\n\t\t\t//Number - The backdrop padding above & below the label in pixels\n\t\t\tscaleBackdropPaddingY : 2,\n\t\n\t\t\t//Number - The backdrop padding to the side of the label in pixels\n\t\t\tscaleBackdropPaddingX : 2,\n\t\n\t\t\t//Boolean - Show line for each value in the scale\n\t\t\tscaleShowLine : true,\n\t\n\t\t\t//Boolean - Stroke a line around each segment in the chart\n\t\t\tsegmentShowStroke : true,\n\t\n\t\t\t//String - The colour of the stroke on each segment.\n\t\t\tsegmentStrokeColor : \"#fff\",\n\t\n\t\t\t//Number - The width of the stroke value in pixels\n\t\t\tsegmentStrokeWidth : 2,\n\t\n\t\t\t//Number - Amount of animation steps\n\t\t\tanimationSteps : 100,\n\t\n\t\t\t//String - Animation easing effect.\n\t\t\tanimationEasing : \"easeOutBounce\",\n\t\n\t\t\t//Boolean - Whether to animate the rotation of the chart\n\t\t\tanimateRotate : true,\n\t\n\t\t\t//Boolean - Whether to animate scaling the chart from the centre\n\t\t\tanimateScale : false,\n\t\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>\"\n\t\t};\n\t\n\t\n\t\tChart.Type.extend({\n\t\t\t//Passing in a name registers this chart in the Chart namespace\n\t\t\tname: \"PolarArea\",\n\t\t\t//Providing a defaults will also register the defaults in the chart namespace\n\t\t\tdefaults : defaultConfig,\n\t\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\t\tinitialize:  function(data){\n\t\t\t\tthis.segments = [];\n\t\t\t\t//Declare segment class as a chart instance specific class, so it can share props for this instance\n\t\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\tinnerRadius : 0,\n\t\t\t\t\tx : this.chart.width/2,\n\t\t\t\t\ty : this.chart.height/2\n\t\t\t\t});\n\t\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\t\tlineArc: true,\n\t\t\t\t\twidth: this.chart.width,\n\t\t\t\t\theight: this.chart.height,\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\t\tvaluesCount: data.length\n\t\t\t\t});\n\t\n\t\t\t\tthis.updateScaleRange(data);\n\t\n\t\t\t\tthis.scale.update();\n\t\n\t\t\t\thelpers.each(data,function(segment,index){\n\t\t\t\t\tthis.addData(segment,index,true);\n\t\t\t\t},this);\n\t\n\t\t\t\t//Set up tooltip events on the chart\n\t\t\t\tif (this.options.showTooltips){\n\t\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\t\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\tgetSegmentsAtEvent : function(e){\n\t\t\t\tvar segmentsArray = [];\n\t\n\t\t\t\tvar location = helpers.getRelativePosition(e);\n\t\n\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t\t},this);\n\t\t\t\treturn segmentsArray;\n\t\t\t},\n\t\t\taddData : function(segment, atIndex, silent){\n\t\t\t\tvar index = atIndex || this.segments.length;\n\t\n\t\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\t\tfillColor: segment.color,\n\t\t\t\t\thighlightColor: segment.highlight || segment.color,\n\t\t\t\t\tlabel: segment.label,\n\t\t\t\t\tvalue: segment.value,\n\t\t\t\t\touterRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),\n\t\t\t\t\tcircumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),\n\t\t\t\t\tstartAngle: Math.PI * 1.5\n\t\t\t\t}));\n\t\t\t\tif (!silent){\n\t\t\t\t\tthis.reflow();\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoveData: function(atIndex){\n\t\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\tcalculateTotal: function(data){\n\t\t\t\tthis.total = 0;\n\t\t\t\thelpers.each(data,function(segment){\n\t\t\t\t\tthis.total += segment.value;\n\t\t\t\t},this);\n\t\t\t\tthis.scale.valuesCount = this.segments.length;\n\t\t\t},\n\t\t\tupdateScaleRange: function(datapoints){\n\t\t\t\tvar valuesArray = [];\n\t\t\t\thelpers.each(datapoints,function(segment){\n\t\t\t\t\tvaluesArray.push(segment.value);\n\t\t\t\t});\n\t\n\t\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t\t{\n\t\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t\t} :\n\t\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\t\tvaluesArray,\n\t\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t\t);\n\t\n\t\t\t\thelpers.extend(\n\t\t\t\t\tthis.scale,\n\t\t\t\t\tscaleSizes,\n\t\t\t\t\t{\n\t\t\t\t\t\tsize: helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\t\tyCenter: this.chart.height/2\n\t\t\t\t\t}\n\t\t\t\t);\n\t\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tthis.calculateTotal(this.segments);\n\t\n\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\tsegment.save();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\treflow : function(){\n\t\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\t\tx : this.chart.width/2,\n\t\t\t\t\ty : this.chart.height/2\n\t\t\t\t});\n\t\t\t\tthis.updateScaleRange(this.segments);\n\t\t\t\tthis.scale.update();\n\t\n\t\t\t\thelpers.extend(this.scale,{\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\t\tsegment.update({\n\t\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t\t});\n\t\t\t\t}, this);\n\t\n\t\t\t},\n\t\t\tdraw : function(ease){\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\t//Clear & draw the canvas\n\t\t\t\tthis.clear();\n\t\t\t\thelpers.each(this.segments,function(segment, index){\n\t\t\t\t\tsegment.transition({\n\t\t\t\t\t\tcircumference : this.scale.getCircumference(),\n\t\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t\t},easingDecimal);\n\t\n\t\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\t\n\t\t\t\t\t// If we've removed the first segment we need to set the first one to\n\t\t\t\t\t// start at the top.\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\t\tif (index < this.segments.length - 1){\n\t\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t\t}\n\t\t\t\t\tsegment.draw();\n\t\t\t\t}, this);\n\t\t\t\tthis.scale.draw();\n\t\t\t}\n\t\t});\n\t\n\t}).call(this);\n\t\n\t(function(){\n\t\t\"use strict\";\n\t\n\t\tvar root = this,\n\t\t\tChart = root.Chart,\n\t\t\thelpers = Chart.helpers;\n\t\n\t\n\t\n\t\tChart.Type.extend({\n\t\t\tname: \"Radar\",\n\t\t\tdefaults:{\n\t\t\t\t//Boolean - Whether to show lines for each scale point\n\t\t\t\tscaleShowLine : true,\n\t\n\t\t\t\t//Boolean - Whether we show the angle lines out of the radar\n\t\t\t\tangleShowLineOut : true,\n\t\n\t\t\t\t//Boolean - Whether to show labels on the scale\n\t\t\t\tscaleShowLabels : false,\n\t\n\t\t\t\t// Boolean - Whether the scale should begin at zero\n\t\t\t\tscaleBeginAtZero : true,\n\t\n\t\t\t\t//String - Colour of the angle line\n\t\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\n\t\n\t\t\t\t//Number - Pixel width of the angle line\n\t\t\t\tangleLineWidth : 1,\n\t\n\t\t\t\t//Number - Interval at which to draw angle lines (\"every Nth point\")\n\t\t\t\tangleLineInterval: 1,\n\t\n\t\t\t\t//String - Point label font declaration\n\t\t\t\tpointLabelFontFamily : \"'Arial'\",\n\t\n\t\t\t\t//String - Point label font weight\n\t\t\t\tpointLabelFontStyle : \"normal\",\n\t\n\t\t\t\t//Number - Point label font size in pixels\n\t\t\t\tpointLabelFontSize : 10,\n\t\n\t\t\t\t//String - Point label font colour\n\t\t\t\tpointLabelFontColor : \"#666\",\n\t\n\t\t\t\t//Boolean - Whether to show a dot for each point\n\t\t\t\tpointDot : true,\n\t\n\t\t\t\t//Number - Radius of each point dot in pixels\n\t\t\t\tpointDotRadius : 3,\n\t\n\t\t\t\t//Number - Pixel width of point dot stroke\n\t\t\t\tpointDotStrokeWidth : 1,\n\t\n\t\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\t\t\tpointHitDetectionRadius : 20,\n\t\n\t\t\t\t//Boolean - Whether to show a stroke for datasets\n\t\t\t\tdatasetStroke : true,\n\t\n\t\t\t\t//Number - Pixel width of dataset stroke\n\t\t\t\tdatasetStrokeWidth : 2,\n\t\n\t\t\t\t//Boolean - Whether to fill the dataset with a colour\n\t\t\t\tdatasetFill : true,\n\t\n\t\t\t\t//String - A legend template\n\t\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\"\n\t\n\t\t\t},\n\t\n\t\t\tinitialize: function(data){\n\t\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\t\tctx : this.chart.ctx\n\t\t\t\t});\n\t\n\t\t\t\tthis.datasets = [];\n\t\n\t\t\t\tthis.buildScale(data);\n\t\n\t\t\t\t//Set up tooltip events on the chart\n\t\t\t\tif (this.options.showTooltips){\n\t\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\t\n\t\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){\n\t\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tthis.showTooltip(activePointsCollection);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\t\thelpers.each(data.datasets,function(dataset){\n\t\n\t\t\t\t\tvar datasetObject = {\n\t\t\t\t\t\tlabel: dataset.label || null,\n\t\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tpoints : []\n\t\t\t\t\t};\n\t\n\t\t\t\t\tthis.datasets.push(datasetObject);\n\t\n\t\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\t\tvar pointPosition;\n\t\t\t\t\t\tif (!this.scale.animation){\n\t\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,\n\t\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,\n\t\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t\t}));\n\t\t\t\t\t},this);\n\t\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\teachPoints : function(callback){\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t\t},this);\n\t\t\t},\n\t\n\t\t\tgetPointsAtEvent : function(evt){\n\t\t\t\tvar mousePosition = helpers.getRelativePosition(evt),\n\t\t\t\t\tfromCenter = helpers.getAngleFromPoint({\n\t\t\t\t\t\tx: this.scale.xCenter,\n\t\t\t\t\t\ty: this.scale.yCenter\n\t\t\t\t\t}, mousePosition);\n\t\n\t\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,\n\t\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),\n\t\t\t\t\tactivePointsCollection = [];\n\t\n\t\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.\n\t\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){\n\t\t\t\t\tpointIndex = 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (fromCenter.distance <= this.scale.drawingArea){\n\t\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\treturn activePointsCollection;\n\t\t\t},\n\t\n\t\t\tbuildScale : function(data){\n\t\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\t\tbackgroundColors: this.options.scaleBackgroundColors,\n\t\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\t\tangleLineColor : this.options.angleLineColor,\n\t\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,\n\t        angleLineInterval: (this.options.angleLineInterval) ? this.options.angleLineInterval : 1,\n\t\t\t\t\t// Point labels at the edge of each line\n\t\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,\n\t\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,\n\t\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,\n\t\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,\n\t\t\t\t\theight : this.chart.height,\n\t\t\t\t\twidth: this.chart.width,\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\t\tctx : this.chart.ctx,\n\t\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\t\tlabels: data.labels,\n\t\t\t\t\tvaluesCount: data.datasets[0].data.length\n\t\t\t\t});\n\t\n\t\t\t\tthis.scale.setScaleSize();\n\t\t\t\tthis.updateScaleRange(data.datasets);\n\t\t\t\tthis.scale.buildYLabels();\n\t\t\t},\n\t\t\tupdateScaleRange: function(datasets){\n\t\t\t\tvar valuesArray = (function(){\n\t\t\t\t\tvar totalDataArray = [];\n\t\t\t\t\thelpers.each(datasets,function(dataset){\n\t\t\t\t\t\tif (dataset.data){\n\t\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\thelpers.each(dataset.points, function(point){\n\t\t\t\t\t\t\t\ttotalDataArray.push(point.value);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn totalDataArray;\n\t\t\t\t})();\n\t\n\t\n\t\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t\t{\n\t\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t\t} :\n\t\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\t\tvaluesArray,\n\t\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t\t);\n\t\n\t\t\t\thelpers.extend(\n\t\t\t\t\tthis.scale,\n\t\t\t\t\tscaleSizes\n\t\t\t\t);\n\t\n\t\t\t},\n\t\t\taddData : function(valuesArray,label){\n\t\t\t\t//Map the values array for each of the datasets\n\t\t\t\tthis.scale.valuesCount++;\n\t\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));\n\t\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : value,\n\t\t\t\t\t\tlabel : label,\n\t\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\t\tx: pointPosition.x,\n\t\t\t\t\t\ty: pointPosition.y,\n\t\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\t\n\t\t\t\tthis.scale.labels.push(label);\n\t\n\t\t\t\tthis.reflow();\n\t\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\tremoveData : function(){\n\t\t\t\tthis.scale.valuesCount--;\n\t\t\t\tthis.scale.labels.shift();\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\t\tdataset.points.shift();\n\t\t\t\t},this);\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t},\n\t\t\tupdate : function(){\n\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\tpoint.save();\n\t\t\t\t});\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.render();\n\t\t\t},\n\t\t\treflow: function(){\n\t\t\t\thelpers.extend(this.scale, {\n\t\t\t\t\twidth : this.chart.width,\n\t\t\t\t\theight: this.chart.height,\n\t\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2\n\t\t\t\t});\n\t\t\t\tthis.updateScaleRange(this.datasets);\n\t\t\t\tthis.scale.setScaleSize();\n\t\t\t\tthis.scale.buildYLabels();\n\t\t\t},\n\t\t\tdraw : function(ease){\n\t\t\t\tvar easeDecimal = ease || 1,\n\t\t\t\t\tctx = this.chart.ctx;\n\t\t\t\tthis.clear();\n\t\t\t\tthis.scale.draw();\n\t\n\t\t\t\thelpers.each(this.datasets,function(dataset){\n\t\n\t\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\n\t\n\t\n\t\t\t\t\t//Draw the line between all the points\n\t\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\t\tctx.moveTo(point.x,point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.stroke();\n\t\n\t\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\t\tif(this.options.datasetFill){\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t}\n\t\t\t\t\t//Now draw the points over the line\n\t\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t\t//lagging behind the point positions\n\t\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\t\tpoint.draw();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t},this);\n\t\n\t\t\t}\n\t\n\t\t});\n\t\n\t\n\t\n\t\n\t\n\t}).call(this);\n\n\n/***/ },\n\n/***/ 173:\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ },\n\n/***/ 174:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('Doughnut', ['getSegmentsAtEvent']);\n\n\n/***/ },\n\n/***/ 175:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('Line', ['getPointsAtEvent']);\n\n\n/***/ },\n\n/***/ 176:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('Pie', ['getSegmentsAtEvent']);\n\n\n/***/ },\n\n/***/ 177:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('PolarArea', ['getSegmentsAtEvent']);\n\n\n/***/ },\n\n/***/ 178:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar vars = __webpack_require__(171);\n\t\n\tmodule.exports = vars.createClass('Radar', ['getPointsAtEvent']);\n\n\n/***/ },\n\n/***/ 179:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar _ = __webpack_require__(167);\n\tvar React = __webpack_require__(2);\n\tvar models_1 = __webpack_require__(180);\n\tvar _1 = __webpack_require__(165);\n\tvar configs = __webpack_require__(521);\n\tvar App = (function (_super) {\n\t    __extends(App, _super);\n\t    function App() {\n\t        _super.call(this);\n\t        this.tickers = _.transform(configs.tickers, function (reduction, name, ticker) {\n\t            reduction[ticker] = null;\n\t        }, {});\n\t        this.tickerModel = new models_1.Ticker();\n\t        this.state = {\n\t            tickers: this.tickers,\n\t            activeTickers: {},\n\t            isOnline: false\n\t        };\n\t    }\n\t    App.prototype.componentDidMount = function () {\n\t        var _this = this;\n\t        this.tickerModel.connectionState\n\t            .map(function (_a) {\n\t            var type = _a.type;\n\t            return type;\n\t        })\n\t            .subscribe(function (type) { return _this.setState({\n\t            isOnline: type === 'open'\n\t        }); });\n\t    };\n\t    App.prototype.toggle = function (code, add) {\n\t        if (add === void 0) { add = true; }\n\t        var ticker = _.get(this.tickers, code);\n\t        if (_.isUndefined(ticker)) {\n\t            return;\n\t        }\n\t        this.tickers[code] = add ? this.tickerModel.get(code) : null;\n\t        this.setState({\n\t            tickers: this.tickers,\n\t            activeTickers: _.omitBy(this.tickers, _.isNull)\n\t        });\n\t    };\n\t    App.prototype.render = function () {\n\t        var _this = this;\n\t        var charts = _.map(this.state.activeTickers, function (ticker, code) {\n\t            return React.createElement(_1.Chart, {key: code, code: code, name: _.get(configs.tickers, code, ''), ticker: ticker});\n\t        });\n\t        return (React.createElement(\"section\", {className: \"ui container\"}, React.createElement(\"label\", {className: \"ui \" + (this.state.isOnline ? 'green' : 'red') + \" circular big label\", id: \"connection-state\"}), React.createElement(_1.Search, {toggle: function (code, add) { return _this.toggle(code, add); }}), charts));\n\t    };\n\t    return App;\n\t}(React.Component));\n\texports.App = App;\n\n\n/***/ },\n\n/***/ 180:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Ticker_1 = __webpack_require__(181);\n\texports.Ticker = Ticker_1.Ticker;\n\n\n/***/ },\n\n/***/ 181:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(167);\n\tvar rxjs_1 = __webpack_require__(182);\n\tvar Ticker = (function () {\n\t    function Ticker() {\n\t        this.connectionState = new rxjs_1.Subject();\n\t    }\n\t    Object.defineProperty(Ticker.prototype, \"ws\", {\n\t        get: function () {\n\t            if (!(this.isOpen() || this.isConnecting())) {\n\t                this._ws = rxjs_1.Observable.webSocket({\n\t                    url:  true ? 'ws://tdc-rxjs.herokuapp.com/ws' : 'ws://localhost:3000/ws',\n\t                    openObserver: this.connectionState,\n\t                    closeObserver: this.connectionState\n\t                });\n\t                this._source = this._ws.share();\n\t            }\n\t            return {\n\t                client: this._ws,\n\t                source: this._source\n\t            };\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Ticker.prototype.get = function (code) {\n\t        var _this = this;\n\t        return rxjs_1.Observable.create(function (subscriber) {\n\t            var sub = _this.ws.source\n\t                .filter(function (_a) {\n\t                var c = _a.c, e = _a.e;\n\t                return e === 'update' && c === code;\n\t            })\n\t                .subscribe(subscriber);\n\t            _this.send({\n\t                e: 'subscribe',\n\t                p: code\n\t            });\n\t            return function () {\n\t                _this.send({\n\t                    e: 'unsubscribe',\n\t                    p: code\n\t                });\n\t                sub.unsubscribe();\n\t            };\n\t        })\n\t            .retryWhen(function (err) { return err.delay(1000); });\n\t    };\n\t    Ticker.prototype.isOpen = function () {\n\t        if (!_.get(this, '_ws.socket')) {\n\t            return false;\n\t        }\n\t        return !!(this._ws.socket.readyState === this._ws.socket.OPEN);\n\t    };\n\t    Ticker.prototype.isConnecting = function () {\n\t        if (!_.get(this, '_ws.socket')) {\n\t            return false;\n\t        }\n\t        return !!(this._ws.socket.readyState === this._ws.socket.CONNECTING);\n\t    };\n\t    Ticker.prototype.send = function (data) {\n\t        if (_.isObjectLike(data)) {\n\t            data = JSON.stringify(data);\n\t        }\n\t        this.ws.client.next(data);\n\t    };\n\t    return Ticker;\n\t}());\n\texports.Ticker = Ticker;\n\n\n/***/ },\n\n/***/ 521:\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"tickers\": {\n\t\t\t\"msft\": \"Microsoft Corporation\",\n\t\t\t\"nflx\": \"Netflix Inc.\",\n\t\t\t\"adbe\": \"Adobe Systems Inc.\",\n\t\t\t\"aapl\": \"Apple Inc.\",\n\t\t\t\"AKAM\": \"Akamai Technologies Inc.\",\n\t\t\t\"BIDU\": \"Baidu Inc.\",\n\t\t\t\"CARB\": \"Carbonite Inc.\",\n\t\t\t\"CHICF\": \"ChitrChatr Communications Inc.\",\n\t\t\t\"CNV\": \"Cnova N.V.\",\n\t\t\t\"CCOI\": \"Cogent Communications Holdings Inc.\",\n\t\t\t\"CXDO\": \"Crexendo Inc.\",\n\t\t\t\"CRWG\": \"CrowdGather Inc.\",\n\t\t\t\"FB\": \"Facebook Inc.\",\n\t\t\t\"FLPC\": \"First Liberty Power Corp.\",\n\t\t\t\"GDDY\": \"GoDaddy Inc.\",\n\t\t\t\"HDSI\": \"HDS International Corp.\",\n\t\t\t\"IAC\": \"IAC/InterActiveCorp.\",\n\t\t\t\"GEEK\": \"INTERNET AMERICA\",\n\t\t\t\"JCOM\": \"j2 Global Inc.\",\n\t\t\t\"LOGL\": \"Legend Oil & Gas Ltd.\",\n\t\t\t\"LLNW\": \"Limelight Networks Inc.\",\n\t\t\t\"MEET\": \"MeetMe Inc.\",\n\t\t\t\"MOMO\": \"Momo Inc.\",\n\t\t\t\"NTES\": \"Netease Inc.\",\n\t\t\t\"NEWC\": \"New Colombia Resources Inc.\",\n\t\t\t\"EGOV\": \"NIC Inc.\",\n\t\t\t\"OPESY\": \"Opera Software ASA ADR\",\n\t\t\t\"RAX\": \"Rackspace Hosting Inc.\"\n\t\t}\n\t};\n\n/***/ },\n\n/***/ 522:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar _ = __webpack_require__(167);\n\tvar React = __webpack_require__(2);\n\tvar configs = __webpack_require__(521);\n\tvar Search = (function (_super) {\n\t    __extends(Search, _super);\n\t    function Search() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    Search.prototype.componentDidMount = function () {\n\t        var _this = this;\n\t        this.$dropdown = $('.ui.dropdown');\n\t        this.$dropdown.dropdown({\n\t            onAdd: function (code) { return _this.props.toggle(code); },\n\t            onRemove: function (code) { return _this.props.toggle(code, false); }\n\t        });\n\t    };\n\t    Search.prototype.componentWillUnmount = function () {\n\t        this.$dropdown.dropdown('destroy');\n\t    };\n\t    Search.prototype.render = function () {\n\t        var options = _.map(configs.tickers, function (name, code) { return React.createElement(\"option\", {key: code, value: code}, name); });\n\t        return (React.createElement(\"section\", null, React.createElement(\"select\", {className: \"ui fluid search dropdown\", multiple: true}, React.createElement(\"option\", {value: \"\"}, \"Select Ticker\"), options)));\n\t    };\n\t    return Search;\n\t}(React.Component));\n\texports.Search = Search;\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** bundle.js\n **/","import * as React from  'react';\nimport * as ReactDom from  'react-dom';\nimport {Observable} from 'rxjs';\nimport {App} from './components';\n\nexport interface ITickerData {\n\tc: string;\n\te: string;\n\tp: number;\n}\n\nexport interface ITicker{\n\tcode?: string;\n\tticker?: Observable<any>\n}\n\nReactDom.render(<App/>, document.getElementById('app'));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/index.tsx\n **/","import {Chart} from './Chart';\nimport {App} from './App';\nimport {Search} from './Search';\n\nexport {\n\tChart,\n\tApp,\n\tSearch\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/index.ts\n **/","import * as _ from 'lodash';\nimport * as React from  'react';\nimport {Observable, Subscription} from 'rxjs';\nimport {Line} from  'react-chartjs';\nimport {ITickerData} from '../';\n\ninterface IChartProps {\n\tcode: string;\n\tname: string;\n\tticker: Observable<ITickerData>\n}\n\ninterface IChartState {\n\tdata: any;\n}\n\nexport class Chart extends React.Component<IChartProps, IChartState>{\n\tprivate subscription: Subscription;\n\tprivate options: any;\n\tprivate defaultData: any = {\n\t\tlabels: [0, 5, 10, 15, 20, 25, 30],\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            strokeColor: 'rgba(151,187,205,1)',\n            pointColor: 'rgba(151,187,205,1)',\n            pointStrokeColor: '#fff',\n            pointHighlightFill: '#fff',\n            pointHighlightStroke: 'rgba(151,187,205,1)',\n            data: _.range(0, 7, 0)\n\t       }]\n\t\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.options = {\n\t\t\tresponsive: true,\n\t\t\tscaleOverride: true,\n    \t\tscaleSteps: 10,\n    \t\tscaleStepWidth: 20,\n    \t\tscaleStartValue: 0\n\t\t};\n\n\t\tthis.state = {\n\t\t\tdata: this.defaultData\n\t\t}\n\t}\n\n\tupdateData(data: Array<number>): any {\n\t\tthis.state.data.datasets[0].data = data;\n\n\t\treturn this.state.data;\n\t}\n\n\tcomponentWillMount(): void {\n\t\tthis.subscription = this.props.ticker\n\t\t\t.map(tick => tick.p)\n\t\t\t.scan((reduction: Array<number>, value: number) => {\n\t\t\t\treturn _(reduction)\n\t\t\t\t\t.push(value)\n\t\t\t\t\t.takeRight(7)\n\t\t\t\t\t.value();\n\t\t\t}, _.range(0, 7, 0))\n\t\t\t.map(data => this.updateData(data))\n\t\t\t.subscribe(data => this.setState({ data }));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.subscription.unsubscribe();\n\t}\n\n\trender(): JSX.Element {\t\t\n\t\treturn (\n\t\t\t<section className=\"chart\">\n\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t<Line data={this.state.data} options={this.options}/>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/Chart.tsx\n **/","module.exports = {\n  Bar: require('./lib/bar'),\n  Doughnut: require('./lib/doughnut'),\n  Line: require('./lib/line'),\n  Pie: require('./lib/pie'),\n  PolarArea: require('./lib/polar-area'),\n  Radar: require('./lib/radar'),\n  createClass: require('./lib/core').createClass\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/index.js\n ** module id = 169\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('Bar', ['getBarsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/bar.js\n ** module id = 170\n ** module chunks = 0\n **/","var React = require('react');\nvar ReactDOM = require('react-dom');\n\nmodule.exports = {\n  createClass: function(chartType, methodNames, dataKey) {\n    var classData = {\n      displayName: chartType + 'Chart',\n      getInitialState: function() { return {}; },\n      render: function() {\n        var _props = {\n          ref: 'canvass'\n        };\n        for (var name in this.props) {\n          if (this.props.hasOwnProperty(name)) {\n            if (name !== 'data' && name !== 'options') {\n              _props[name] = this.props[name];\n            }\n          }\n        }\n        return React.createElement('canvas', _props);\n      }\n    };\n\n    var extras = ['clear', 'stop', 'resize', 'toBase64Image', 'generateLegend', 'update', 'addData', 'removeData'];\n    function extra(type) {\n      classData[type] = function() {\n        return this.state.chart[type].apply(this.state.chart, arguments);\n      };\n    }\n\n    classData.componentDidMount = function() {\n      this.initializeChart(this.props);\n    };\n\n    classData.componentWillUnmount = function() {\n      var chart = this.state.chart;\n      chart.destroy();\n    };\n\n    classData.componentWillReceiveProps = function(nextProps) {\n      var chart = this.state.chart;\n      if (nextProps.redraw) {\n        chart.destroy();\n        this.initializeChart(nextProps);\n      } else {\n        dataKey = dataKey || dataKeys[chart.name];\n        updatePoints(nextProps, chart, dataKey);\n        if (chart.scale) {\n          chart.scale.xLabels = nextProps.data.labels;\n          chart.scale.calculateXLabelRotation();\n        }\n        chart.update();\n      }\n    };\n\n    classData.initializeChart = function(nextProps) {\n      var Chart = require('chart.js');\n      var el = ReactDOM.findDOMNode(this);\n      var ctx = el.getContext(\"2d\");\n      var chart = new Chart(ctx)[chartType](nextProps.data, nextProps.options || {});\n      this.state.chart = chart;\n    };\n\n    // return the chartjs instance\n    classData.getChart = function() {\n      return this.state.chart;\n    };\n\n    // return the canvass element that contains the chart\n    classData.getCanvass = function() {\n      return this.refs.canvass;\n    };\n\n    classData.getCanvas = classData.getCanvass;\n\n    var i;\n    for (i=0; i<extras.length; i++) {\n      extra(extras[i]);\n    }\n    for (i=0; i<methodNames.length; i++) {\n      extra(methodNames[i]);\n    }\n\n    return React.createClass(classData);\n  }\n};\n\nvar dataKeys = {\n  'Line': 'points',\n  'Radar': 'points',\n  'Bar': 'bars'\n};\n\nvar updatePoints = function(nextProps, chart, dataKey) {\n  var name = chart.name;\n\n  if (name === 'PolarArea' || name === 'Pie' || name === 'Doughnut') {\n    nextProps.data.forEach(function(segment, segmentIndex) {\n      if (!chart.segments[segmentIndex]) {\n        chart.addData(segment);\n      } else {\n        Object.keys(segment).forEach(function (key) {\n          chart.segments[segmentIndex][key] = segment[key];\n        });\n      }\n    });\n  } else {\n    while (chart.scale.xLabels.length > nextProps.data.labels.length) {\n      chart.removeData();\n    }\n    nextProps.data.datasets.forEach(function(set, setIndex) {\n      set.data.forEach(function(val, pointIndex) {\n        if (typeof(chart.datasets[setIndex][dataKey][pointIndex]) == \"undefined\") {\n          addData(nextProps, chart, setIndex, pointIndex);\n        } else {\n          chart.datasets[setIndex][dataKey][pointIndex].value = val;\n        }\n      });\n    });\n  }\n};\n\nvar addData = function(nextProps, chart, setIndex, pointIndex) {\n  var values = [];\n  nextProps.data.datasets.forEach(function(set) {\n    values.push(set.data[pointIndex]);\n  });\n  chart.addData(values, nextProps.data.labels[setIndex]);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/core.js\n ** module id = 171\n ** module chunks = 0\n **/","/*!\n * Chart.js\n * http://chartjs.org/\n * Version: 1.1.1\n *\n * Copyright 2015 Nick Downie\n * Released under the MIT license\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\n */\n\n\n(function(){\n\n\t\"use strict\";\n\n\t//Declare root variable - window in the browser, global on the server\n\tvar root = this,\n\t\tprevious = root.Chart;\n\n\t//Occupy the global variable of Chart, and create a simple base class\n\tvar Chart = function(context){\n\t\tvar chart = this;\n\t\tthis.canvas = context.canvas;\n\n\t\tthis.ctx = context;\n\n\t\t//Variables global to the chart\n\t\tvar computeDimension = function(element,dimension)\n\t\t{\n\t\t\tif (element['offset'+dimension])\n\t\t\t{\n\t\t\t\treturn element['offset'+dimension];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn document.defaultView.getComputedStyle(element).getPropertyValue(dimension);\n\t\t\t}\n\t\t};\n\n\t\tvar width = this.width = computeDimension(context.canvas,'Width') || context.canvas.width;\n\t\tvar height = this.height = computeDimension(context.canvas,'Height') || context.canvas.height;\n\n\t\tthis.aspectRatio = this.width / this.height;\n\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\n\t\thelpers.retinaScale(this);\n\n\t\treturn this;\n\t};\n\t//Globally expose the defaults to allow for user updating/changing\n\tChart.defaults = {\n\t\tglobal: {\n\t\t\t// Boolean - Whether to animate the chart\n\t\t\tanimation: true,\n\n\t\t\t// Number - Number of animation steps\n\t\t\tanimationSteps: 60,\n\n\t\t\t// String - Animation easing effect\n\t\t\tanimationEasing: \"easeOutQuart\",\n\n\t\t\t// Boolean - If we should show the scale at all\n\t\t\tshowScale: true,\n\n\t\t\t// Boolean - If we want to override with a hard coded scale\n\t\t\tscaleOverride: false,\n\n\t\t\t// ** Required if scaleOverride is true **\n\t\t\t// Number - The number of steps in a hard coded scale\n\t\t\tscaleSteps: null,\n\t\t\t// Number - The value jump in the hard coded scale\n\t\t\tscaleStepWidth: null,\n\t\t\t// Number - The scale starting value\n\t\t\tscaleStartValue: null,\n\n\t\t\t// String - Colour of the scale line\n\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",\n\n\t\t\t// Number - Pixel width of the scale line\n\t\t\tscaleLineWidth: 1,\n\n\t\t\t// Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels: true,\n\n\t\t\t// Interpolated JS string - can access value\n\t\t\tscaleLabel: \"<%=value%>\",\n\n\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there\n\t\t\tscaleIntegersOnly: true,\n\n\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\t\tscaleBeginAtZero: false,\n\n\t\t\t// String - Scale label font declaration for the scale label\n\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Scale label font size in pixels\n\t\t\tscaleFontSize: 12,\n\n\t\t\t// String - Scale label font weight style\n\t\t\tscaleFontStyle: \"normal\",\n\n\t\t\t// String - Scale label font colour\n\t\t\tscaleFontColor: \"#666\",\n\n\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.\n\t\t\tresponsive: false,\n\n\t\t\t// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n\t\t\tmaintainAspectRatio: true,\n\n\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove\n\t\t\tshowTooltips: true,\n\n\t\t\t// Boolean - Determines whether to draw built-in tooltip or call custom tooltip function\n\t\t\tcustomTooltips: false,\n\n\t\t\t// Array - Array of string names to attach tooltip events\n\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],\n\n\t\t\t// String - Tooltip background colour\n\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",\n\n\t\t\t// String - Tooltip label font declaration for the scale label\n\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip label font size in pixels\n\t\t\ttooltipFontSize: 14,\n\n\t\t\t// String - Tooltip font weight style\n\t\t\ttooltipFontStyle: \"normal\",\n\n\t\t\t// String - Tooltip label font colour\n\t\t\ttooltipFontColor: \"#fff\",\n\n\t\t\t// String - Tooltip title font declaration for the scale label\n\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip title font size in pixels\n\t\t\ttooltipTitleFontSize: 14,\n\n\t\t\t// String - Tooltip title font weight style\n\t\t\ttooltipTitleFontStyle: \"bold\",\n\n\t\t\t// String - Tooltip title font colour\n\t\t\ttooltipTitleFontColor: \"#fff\",\n\n\t\t\t// String - Tooltip title template\n\t\t\ttooltipTitleTemplate: \"<%= label%>\",\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipYPadding: 6,\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipXPadding: 6,\n\n\t\t\t// Number - Size of the caret on the tooltip\n\t\t\ttooltipCaretSize: 8,\n\n\t\t\t// Number - Pixel radius of the tooltip border\n\t\t\ttooltipCornerRadius: 6,\n\n\t\t\t// Number - Pixel offset from point x to tooltip edge\n\t\t\ttooltipXOffset: 10,\n\n\t\t\t// String - Template string for single tooltips\n\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\n\n\t\t\t// String - Template string for single tooltips\n\t\t\tmultiTooltipTemplate: \"<%= datasetLabel %>: <%= value %>\",\n\n\t\t\t// String - Colour behind the legend colour block\n\t\t\tmultiTooltipKeyBackground: '#fff',\n\n\t\t\t// Array - A list of colors to use as the defaults\n\t\t\tsegmentColorDefault: [\"#A6CEE3\", \"#1F78B4\", \"#B2DF8A\", \"#33A02C\", \"#FB9A99\", \"#E31A1C\", \"#FDBF6F\", \"#FF7F00\", \"#CAB2D6\", \"#6A3D9A\", \"#B4B482\", \"#B15928\" ],\n\n\t\t\t// Array - A list of highlight colors to use as the defaults\n\t\t\tsegmentHighlightColorDefaults: [ \"#CEF6FF\", \"#47A0DC\", \"#DAFFB2\", \"#5BC854\", \"#FFC2C1\", \"#FF4244\", \"#FFE797\", \"#FFA728\", \"#F2DAFE\", \"#9265C2\", \"#DCDCAA\", \"#D98150\" ],\n\n\t\t\t// Function - Will fire on animation progression.\n\t\t\tonAnimationProgress: function(){},\n\n\t\t\t// Function - Will fire on animation completion.\n\t\t\tonAnimationComplete: function(){}\n\n\t\t}\n\t};\n\n\t//Create a dictionary of chart types, to allow for extension of existing types\n\tChart.types = {};\n\n\t//Global Chart helpers object for utility methods and classes\n\tvar helpers = Chart.helpers = {};\n\n\t\t//-- Basic js utility methods\n\tvar each = helpers.each = function(loopable,callback,self){\n\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);\n\t\t\t// Check to see if null or undefined firstly.\n\t\t\tif (loopable){\n\t\t\t\tif (loopable.length === +loopable.length){\n\t\t\t\t\tvar i;\n\t\t\t\t\tfor (i=0; i<loopable.length; i++){\n\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor (var item in loopable){\n\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclone = helpers.clone = function(obj){\n\t\t\tvar objClone = {};\n\t\t\teach(obj,function(value,key){\n\t\t\t\tif (obj.hasOwnProperty(key)){\n\t\t\t\t\tobjClone[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn objClone;\n\t\t},\n\t\textend = helpers.extend = function(base){\n\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {\n\t\t\t\teach(extensionObject,function(value,key){\n\t\t\t\t\tif (extensionObject.hasOwnProperty(key)){\n\t\t\t\t\t\tbase[key] = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn base;\n\t\t},\n\t\tmerge = helpers.merge = function(base,master){\n\t\t\t//Merge properties in left object over to a shallow clone of object right.\n\t\t\tvar args = Array.prototype.slice.call(arguments,0);\n\t\t\targs.unshift({});\n\t\t\treturn extend.apply(null, args);\n\t\t},\n\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){\n\t\t\tif (Array.prototype.indexOf) {\n\t\t\t\treturn arrayToSearch.indexOf(item);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {\n\t\t\t\t\tif (arrayToSearch[i] === item) return i;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t},\n\t\twhere = helpers.where = function(collection, filterCallback){\n\t\t\tvar filtered = [];\n\n\t\t\thelpers.each(collection, function(item){\n\t\t\t\tif (filterCallback(item)){\n\t\t\t\t\tfiltered.push(item);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn filtered;\n\t\t},\n\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to start of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to end of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = arrayToSearch.length;\n\t\t\t}\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tinherits = helpers.inherits = function(extensions){\n\t\t\t//Basic javascript inheritance based on the model created in Backbone.js\n\t\t\tvar parent = this;\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\n\n\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};\n\t\t\tSurrogate.prototype = parent.prototype;\n\t\t\tChartElement.prototype = new Surrogate();\n\n\t\t\tChartElement.extend = inherits;\n\n\t\t\tif (extensions) extend(ChartElement.prototype, extensions);\n\n\t\t\tChartElement.__super__ = parent.prototype;\n\n\t\t\treturn ChartElement;\n\t\t},\n\t\tnoop = helpers.noop = function(){},\n\t\tuid = helpers.uid = (function(){\n\t\t\tvar id=0;\n\t\t\treturn function(){\n\t\t\t\treturn \"chart-\" + id++;\n\t\t\t};\n\t\t})(),\n\t\twarn = helpers.warn = function(str){\n\t\t\t//Method for warning of errors\n\t\t\tif (window.console && typeof window.console.warn === \"function\") console.warn(str);\n\t\t},\n\t\tamd = helpers.amd = (typeof define === 'function' && define.amd),\n\t\t//-- Math methods\n\t\tisNumber = helpers.isNumber = function(n){\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t\t},\n\t\tmax = helpers.max = function(array){\n\t\t\treturn Math.max.apply( Math, array );\n\t\t},\n\t\tmin = helpers.min = function(array){\n\t\t\treturn Math.min.apply( Math, array );\n\t\t},\n\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){\n\t\t\tif(isNumber(maxValue)) {\n\t\t\t\tif( valueToCap > maxValue ) {\n\t\t\t\t\treturn maxValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(isNumber(minValue)){\n\t\t\t\tif ( valueToCap < minValue ){\n\t\t\t\t\treturn minValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn valueToCap;\n\t\t},\n\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){\n\t\t\tif (num%1!==0 && isNumber(num)){\n\t\t\t\tvar s = num.toString();\n\t\t\t\tif(s.indexOf(\"e-\") < 0){\n\t\t\t\t\t// no exponent, e.g. 0.01\n\t\t\t\t\treturn s.split(\".\")[1].length;\n\t\t\t\t}\n\t\t\t\telse if(s.indexOf(\".\") < 0) {\n\t\t\t\t\t// no decimal point, e.g. 1e-9\n\t\t\t\t\treturn parseInt(s.split(\"e-\")[1]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// exponent and decimal point, e.g. 1.23e-9\n\t\t\t\t\tvar parts = s.split(\".\")[1].split(\"e-\");\n\t\t\t\t\treturn parts[0].length + parseInt(parts[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\ttoRadians = helpers.radians = function(degrees){\n\t\t\treturn degrees * (Math.PI/180);\n\t\t},\n\t\t// Gets the angle from vertical upright to the point about a centre.\n\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\n\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle\n\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){\n\t\t\t\tangle += Math.PI*2;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tangle: angle,\n\t\t\t\tdistance: radialDistanceFromCenter\n\t\t\t};\n\t\t},\n\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t\t},\n\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){\n\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),\n\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),\n\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta\n\t\t\t\tfb=t*d12/(d01+d12);\n\t\t\treturn {\n\t\t\t\tinner : {\n\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t},\n\t\t\t\touter : {\n\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){\n\t\t\treturn Math.floor(Math.log(val) / Math.LN10);\n\t\t},\n\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\n\n\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base\n\t\t\tvar minSteps = 2,\n\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),\n\t\t\t\tskipFitting = (minSteps >= maxSteps);\n\n\t\t\t// Filter out null values since these would min() to zero\n\t\t\tvar values = [];\n\t\t\teach(valuesArray, function( v ){\n\t\t\t\tv == null || values.push( v );\n\t\t\t});\n\t\t\tvar minValue = min(values),\n\t\t\t    maxValue = max(values);\n\n\t\t\t// We need some degree of separation here to calculate the scales if all the values are the same\n\t\t\t// Adding/minusing 0.5 will give us a range of 1.\n\t\t\tif (maxValue === minValue){\n\t\t\t\tmaxValue += 0.5;\n\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero\n\t\t\t\tif (minValue >= 0.5 && !startFromZero){\n\t\t\t\t\tminValue -= 0.5;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// Make up a whole number above the values\n\t\t\t\t\tmaxValue += 0.5;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),\n\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),\n\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphRange = graphMax - graphMin,\n\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);\n\n\t\t\t//If we have more space on the graph we'll use it to give more definition to the data\n\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {\n\t\t\t\tif(numberOfSteps > maxSteps){\n\t\t\t\t\tstepValue *=2;\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.\n\t\t\t\t\tif (numberOfSteps % 1 !== 0){\n\t\t\t\t\t\tskipFitting = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//We can fit in double the amount of scale points on the scale\n\t\t\t\telse{\n\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal\n\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){\n\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\n\t\t\t\t\t\tif(stepValue/2 % 1 === 0){\n\t\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//If it would make it a float break out of the loop\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.\n\t\t\t\t\telse{\n\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (skipFitting){\n\t\t\t\tnumberOfSteps = minSteps;\n\t\t\t\tstepValue = graphRange / numberOfSteps;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsteps : numberOfSteps,\n\t\t\t\tstepValue : stepValue,\n\t\t\t\tmin : graphMin,\n\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)\n\t\t\t};\n\n\t\t},\n\t\t/* jshint ignore:start */\n\t\t// Blows up jshint errors based on the new Function constructor\n\t\t//Templating methods\n\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\n\t\ttemplate = helpers.template = function(templateString, valuesObject){\n\n\t\t\t// If templateString is function rather than string-template - call the function for valuesObject\n\n\t\t\tif(templateString instanceof Function){\n\t\t\t \treturn templateString(valuesObject);\n\t\t \t}\n\n\t\t\tvar cache = {};\n\t\t\tfunction tmpl(str, data){\n\t\t\t\t// Figure out if we're getting a template, or if we need to\n\t\t\t\t// load the template - and be sure to cache the result.\n\t\t\t\tvar fn = !/\\W/.test(str) ?\n\t\t\t\tcache[str] = cache[str] :\n\n\t\t\t\t// Generate a reusable function that will serve as a template\n\t\t\t\t// generator (and which will be cached).\n\t\t\t\tnew Function(\"obj\",\n\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\n\t\t\t\t\t// Introduce the data as local variables using with(){}\n\t\t\t\t\t\"with(obj){p.push('\" +\n\n\t\t\t\t\t// Convert the template into pure JavaScript\n\t\t\t\t\tstr\n\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")\n\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")\n\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")\n\t\t\t\t\t\t.split(\"\\t\").join(\"');\")\n\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")\n\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +\n\t\t\t\t\t\"');}return p.join('');\"\n\t\t\t\t);\n\n\t\t\t\t// Provide some basic currying to the user\n\t\t\t\treturn data ? fn( data ) : fn;\n\t\t\t}\n\t\t\treturn tmpl(templateString,valuesObject);\n\t\t},\n\t\t/* jshint ignore:end */\n\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){\n\t\t\tvar labelsArray = new Array(numberOfSteps);\n\t\t\tif (templateString){\n\t\t\t\teach(labelsArray,function(val,index){\n\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn labelsArray;\n\t\t},\n\t\t//--Animation methods\n\t\t//Easing functions adapted from Robert Penner's easing equations\n\t\t//http://www.robertpenner.com/easing/\n\t\teasingEffects = helpers.easingEffects = {\n\t\t\tlinear: function (t) {\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\teaseInQuad: function (t) {\n\t\t\t\treturn t * t;\n\t\t\t},\n\t\t\teaseOutQuad: function (t) {\n\t\t\t\treturn -1 * t * (t - 2);\n\t\t\t},\n\t\t\teaseInOutQuad: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t\t},\n\t\t\teaseInCubic: function (t) {\n\t\t\t\treturn t * t * t;\n\t\t\t},\n\t\t\teaseOutCubic: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutCubic: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t\t},\n\t\t\teaseInQuart: function (t) {\n\t\t\t\treturn t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuart: function (t) {\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t\t},\n\t\t\teaseInOutQuart: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t\t},\n\t\t\teaseInQuint: function (t) {\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuint: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutQuint: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t\t},\n\t\t\teaseInSine: function (t) {\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t\t},\n\t\t\teaseOutSine: function (t) {\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t\t},\n\t\t\teaseInOutSine: function (t) {\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t\t},\n\t\t\teaseInExpo: function (t) {\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t\t},\n\t\t\teaseOutExpo: function (t) {\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t\t},\n\t\t\teaseInOutExpo: function (t) {\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif (t === 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t},\n\t\t\teaseInCirc: function (t) {\n\t\t\t\tif (t >= 1){\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t\t},\n\t\t\teaseOutCirc: function (t) {\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t\t},\n\t\t\teaseInOutCirc: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t\t},\n\t\t\teaseInElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else{\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t},\n\t\t\teaseOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else{\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t\t},\n\t\t\teaseInOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) == 2){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * (0.3 * 1.5);\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\tif (t < 1){\n\t\t\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));}\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t\t},\n\t\t\teaseInBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t\t},\n\t\t\teaseOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t\t},\n\t\t\teaseInOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t\t},\n\t\t\teaseInBounce: function (t) {\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t\t},\n\t\t\teaseOutBounce: function (t) {\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t\t} else {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t\t\t}\n\t\t\t},\n\t\t\teaseInOutBounce: function (t) {\n\t\t\t\tif (t < 1 / 2){\n\t\t\t\t\treturn easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t\t}\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t\t}\n\t\t},\n\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){\n\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){\n\t\t\treturn window.cancelAnimationFrame ||\n\t\t\t\twindow.webkitCancelAnimationFrame ||\n\t\t\t\twindow.mozCancelAnimationFrame ||\n\t\t\t\twindow.oCancelAnimationFrame ||\n\t\t\t\twindow.msCancelAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\n\n\t\t\tvar currentStep = 0,\n\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;\n\n\t\t\tvar animationFrame = function(){\n\t\t\t\tcurrentStep++;\n\t\t\t\tvar stepDecimal = currentStep/totalSteps;\n\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\n\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);\n\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);\n\t\t\t\tif (currentStep < totalSteps){\n\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);\n\t\t\t\t} else{\n\t\t\t\t\tonComplete.apply(chartInstance);\n\t\t\t\t}\n\t\t\t};\n\t\t\trequestAnimFrame(animationFrame);\n\t\t},\n\t\t//-- DOM methods\n\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){\n\t\t\tvar mouseX, mouseY;\n\t\t\tvar e = evt.originalEvent || evt,\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();\n\n\t\t\tif (e.touches){\n\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;\n\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmouseX = e.clientX - boundingRect.left;\n\t\t\t\tmouseY = e.clientY - boundingRect.top;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx : mouseX,\n\t\t\t\ty : mouseY\n\t\t\t};\n\n\t\t},\n\t\taddEvent = helpers.addEvent = function(node,eventType,method){\n\t\t\tif (node.addEventListener){\n\t\t\t\tnode.addEventListener(eventType,method);\n\t\t\t} else if (node.attachEvent){\n\t\t\t\tnode.attachEvent(\"on\"+eventType, method);\n\t\t\t} else {\n\t\t\t\tnode[\"on\"+eventType] = method;\n\t\t\t}\n\t\t},\n\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){\n\t\t\tif (node.removeEventListener){\n\t\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t\t} else if (node.detachEvent){\n\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);\n\t\t\t} else{\n\t\t\t\tnode[\"on\" + eventType] = noop;\n\t\t\t}\n\t\t},\n\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){\n\t\t\t// Create the events object if it's not already present\n\t\t\tif (!chartInstance.events) chartInstance.events = {};\n\n\t\t\teach(arrayOfEvents,function(eventName){\n\t\t\t\tchartInstance.events[eventName] = function(){\n\t\t\t\t\thandler.apply(chartInstance, arguments);\n\t\t\t\t};\n\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);\n\t\t\t});\n\t\t},\n\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {\n\t\t\teach(arrayOfEvents, function(handler,eventName){\n\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);\n\t\t\t});\n\t\t},\n\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){\n\t\t\tvar container = domNode.parentNode,\n\t\t\t    padding = parseInt(getStyle(container, 'padding-left')) + parseInt(getStyle(container, 'padding-right'));\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container ? container.clientWidth - padding : 0;\n\t\t},\n\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){\n\t\t\tvar container = domNode.parentNode,\n\t\t\t    padding = parseInt(getStyle(container, 'padding-bottom')) + parseInt(getStyle(container, 'padding-top'));\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container ? container.clientHeight - padding : 0;\n\t\t},\n\t\tgetStyle = helpers.getStyle = function (el, property) {\n\t\t\treturn el.currentStyle ?\n\t\t\t\tel.currentStyle[property] :\n\t\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t\t},\n\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support\n\t\tretinaScale = helpers.retinaScale = function(chart){\n\t\t\tvar ctx = chart.ctx,\n\t\t\t\twidth = chart.canvas.width,\n\t\t\t\theight = chart.canvas.height;\n\n\t\t\tif (window.devicePixelRatio) {\n\t\t\t\tctx.canvas.style.width = width + \"px\";\n\t\t\t\tctx.canvas.style.height = height + \"px\";\n\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;\n\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;\n\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t\t\t}\n\t\t},\n\t\t//-- Canvas methods\n\t\tclear = helpers.clear = function(chart){\n\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);\n\t\t},\n\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){\n\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;\n\t\t},\n\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){\n\t\t\tctx.font = font;\n\t\t\tvar longest = 0;\n\t\t\teach(arrayOfStrings,function(string){\n\t\t\t\tvar textWidth = ctx.measureText(string).width;\n\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;\n\t\t\t});\n\t\t\treturn longest;\n\t\t},\n\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x + radius, y);\n\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\tctx.lineTo(x, y + radius);\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t\tctx.closePath();\n\t\t};\n\n\n\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t//Destroy method on the chart will remove the instance of the chart from this reference.\n\tChart.instances = {};\n\n\tChart.Type = function(data,options,chart){\n\t\tthis.options = options;\n\t\tthis.chart = chart;\n\t\tthis.id = uid();\n\t\t//Add the chart instance to the global namespace\n\t\tChart.instances[this.id] = this;\n\n\t\t// Initialize is always called when a chart type is created\n\t\t// By default it is a no op, but it should be extended\n\t\tif (options.responsive){\n\t\t\tthis.resize();\n\t\t}\n\t\tthis.initialize.call(this,data);\n\t};\n\n\t//Core methods that'll be a part of every chart type\n\textend(Chart.Type.prototype,{\n\t\tinitialize : function(){return this;},\n\t\tclear : function(){\n\t\t\tclear(this.chart);\n\t\t\treturn this;\n\t\t},\n\t\tstop : function(){\n\t\t\t// Stops any current animation loop occuring\n\t\t\tChart.animationService.cancelAnimation(this);\n\t\t\treturn this;\n\t\t},\n\t\tresize : function(callback){\n\t\t\tthis.stop();\n\t\t\tvar canvas = this.chart.canvas,\n\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),\n\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\n\n\t\t\tcanvas.width = this.chart.width = newWidth;\n\t\t\tcanvas.height = this.chart.height = newHeight;\n\n\t\t\tretinaScale(this.chart);\n\n\t\t\tif (typeof callback === \"function\"){\n\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\treflow : noop,\n\t\trender : function(reflow){\n\t\t\tif (reflow){\n\t\t\t\tthis.reflow();\n\t\t\t}\n\t\t\t\n\t\t\tif (this.options.animation && !reflow){\n\t\t\t\tvar animation = new Chart.Animation();\n\t\t\t\tanimation.numSteps = this.options.animationSteps;\n\t\t\t\tanimation.easing = this.options.animationEasing;\n\t\t\t\t\n\t\t\t\t// render function\n\t\t\t\tanimation.render = function(chartInstance, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers.easingEffects[animationObject.easing];\n\t\t\t\t\tvar stepDecimal = animationObject.currentStep / animationObject.numSteps;\n\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\t\t\t\t\t\n\t\t\t\t\tchartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// user events\n\t\t\t\tanimation.onAnimationProgress = this.options.onAnimationProgress;\n\t\t\t\tanimation.onAnimationComplete = this.options.onAnimationComplete;\n\t\t\t\t\n\t\t\t\tChart.animationService.addAnimation(this, animation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.draw();\n\t\t\t\tthis.options.onAnimationComplete.call(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tgenerateLegend : function(){\n\t\t\treturn helpers.template(this.options.legendTemplate, this);\n\t\t},\n\t\tdestroy : function(){\n\t\t\tthis.stop();\n\t\t\tthis.clear();\n\t\t\tunbindEvents(this, this.events);\n\t\t\tvar canvas = this.chart.canvas;\n\n\t\t\t// Reset canvas height/width attributes starts a fresh with the canvas context\n\t\t\tcanvas.width = this.chart.width;\n\t\t\tcanvas.height = this.chart.height;\n\n\t\t\t// < IE9 doesn't support removeProperty\n\t\t\tif (canvas.style.removeProperty) {\n\t\t\t\tcanvas.style.removeProperty('width');\n\t\t\t\tcanvas.style.removeProperty('height');\n\t\t\t} else {\n\t\t\t\tcanvas.style.removeAttribute('width');\n\t\t\t\tcanvas.style.removeAttribute('height');\n\t\t\t}\n\n\t\t\tdelete Chart.instances[this.id];\n\t\t},\n\t\tshowTooltip : function(ChartElements, forceRedraw){\n\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.\n\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];\n\n\t\t\tvar isChanged = (function(Elements){\n\t\t\t\tvar changed = false;\n\n\t\t\t\tif (Elements.length !== this.activeElements.length){\n\t\t\t\t\tchanged = true;\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\n\t\t\t\teach(Elements, function(element, index){\n\t\t\t\t\tif (element !== this.activeElements[index]){\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t\treturn changed;\n\t\t\t}).call(this, ChartElements);\n\n\t\t\tif (!isChanged && !forceRedraw){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.activeElements = ChartElements;\n\t\t\t}\n\t\t\tthis.draw();\n\t\t\tif(this.options.customTooltips){\n\t\t\t\tthis.options.customTooltips(false);\n\t\t\t}\n\t\t\tif (ChartElements.length > 0){\n\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index\n\t\t\t\tif (this.datasets && this.datasets.length > 1) {\n\t\t\t\t\tvar dataArray,\n\t\t\t\t\t\tdataIndex;\n\n\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;\n\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);\n\t\t\t\t\t\tif (dataIndex !== -1){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar tooltipLabels = [],\n\t\t\t\t\t\ttooltipColors = [],\n\t\t\t\t\t\tmedianPosition = (function(index) {\n\n\t\t\t\t\t\t\t// Get all the points at that particular index\n\t\t\t\t\t\t\tvar Elements = [],\n\t\t\t\t\t\t\t\tdataCollection,\n\t\t\t\t\t\t\t\txPositions = [],\n\t\t\t\t\t\t\t\tyPositions = [],\n\t\t\t\t\t\t\t\txMax,\n\t\t\t\t\t\t\t\tyMax,\n\t\t\t\t\t\t\t\txMin,\n\t\t\t\t\t\t\t\tyMin;\n\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;\n\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){\n\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\thelpers.each(Elements, function(element) {\n\t\t\t\t\t\t\t\txPositions.push(element.x);\n\t\t\t\t\t\t\t\tyPositions.push(element.y);\n\n\n\t\t\t\t\t\t\t\t//Include any colour information about the element\n\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));\n\t\t\t\t\t\t\t\ttooltipColors.push({\n\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,\n\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}, this);\n\n\t\t\t\t\t\t\tyMin = min(yPositions);\n\t\t\t\t\t\t\tyMax = max(yPositions);\n\n\t\t\t\t\t\t\txMin = min(xPositions);\n\t\t\t\t\t\t\txMax = max(xPositions);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,\n\t\t\t\t\t\t\t\ty: (yMin + yMax)/2\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}).call(this, dataIndex);\n\n\t\t\t\t\tnew Chart.MultiTooltip({\n\t\t\t\t\t\tx: medianPosition.x,\n\t\t\t\t\t\ty: medianPosition.y,\n\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\txOffset: this.options.tooltipXOffset,\n\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,\n\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,\n\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,\n\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,\n\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\tlabels: tooltipLabels,\n\t\t\t\t\t\tlegendColors: tooltipColors,\n\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,\n\t\t\t\t\t\ttitle: template(this.options.tooltipTitleTemplate,ChartElements[0]),\n\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\tctx: this.chart.ctx,\n\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t}).draw();\n\n\t\t\t\t} else {\n\t\t\t\t\teach(ChartElements, function(Element) {\n\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();\n\t\t\t\t\t\tnew Chart.Tooltip({\n\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),\n\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),\n\t\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t\t}).draw();\n\t\t\t\t\t}, this);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\ttoBase64Image : function(){\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t}\n\t});\n\n\tChart.Type.extend = function(extensions){\n\n\t\tvar parent = this;\n\n\t\tvar ChartType = function(){\n\t\t\treturn parent.apply(this,arguments);\n\t\t};\n\n\t\t//Copy the prototype object of the this class\n\t\tChartType.prototype = clone(parent.prototype);\n\t\t//Now overwrite some of the properties in the base class with the new extensions\n\t\textend(ChartType.prototype, extensions);\n\n\t\tChartType.extend = Chart.Type.extend;\n\n\t\tif (extensions.name || parent.prototype.name){\n\n\t\t\tvar chartName = extensions.name || parent.prototype.name;\n\t\t\t//Assign any potential default values of the new chart type\n\n\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.\n\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart\n\t\t\t//doesn't define some defaults of their own.\n\n\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};\n\n\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);\n\n\t\t\tChart.types[chartName] = ChartType;\n\n\t\t\t//Register this new chart type in the Chart prototype\n\t\t\tChart.prototype[chartName] = function(data,options){\n\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});\n\t\t\t\treturn new ChartType(data,config,this);\n\t\t\t};\n\t\t} else{\n\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");\n\t\t}\n\t\treturn parent;\n\t};\n\n\tChart.Element = function(configuration){\n\t\textend(this,configuration);\n\t\tthis.initialize.apply(this,arguments);\n\t\tthis.save();\n\t};\n\textend(Chart.Element.prototype,{\n\t\tinitialize : function(){},\n\t\trestore : function(props){\n\t\t\tif (!props){\n\t\t\t\textend(this,this._saved);\n\t\t\t} else {\n\t\t\t\teach(props,function(key){\n\t\t\t\t\tthis[key] = this._saved[key];\n\t\t\t\t},this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tsave : function(){\n\t\t\tthis._saved = clone(this);\n\t\t\tdelete this._saved._saved;\n\t\t\treturn this;\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\teach(newProps,function(value,key){\n\t\t\t\tthis._saved[key] = this[key];\n\t\t\t\tthis[key] = value;\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttransition : function(props,ease){\n\t\t\teach(props,function(value,key){\n\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\treturn {\n\t\t\t\tx : this.x,\n\t\t\t\ty : this.y\n\t\t\t};\n\t\t},\n\t\thasValue: function(){\n\t\t\treturn isNumber(this.value);\n\t\t}\n\t});\n\n\tChart.Element.extend = inherits;\n\n\n\tChart.Point = Chart.Element.extend({\n\t\tdisplay: true,\n\t\tinRange: function(chartX,chartY){\n\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;\n\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));\n\t\t},\n\t\tdraw : function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\n\t\t\t//Quick debug for bezier curve splining\n\t\t\t//Highlights control points and the line between them.\n\t\t\t//Handy for dev - stripped in the min version.\n\n\t\t\t// ctx.save();\n\t\t\t// ctx.fillStyle = \"black\";\n\t\t\t// ctx.strokeStyle = \"black\"\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);\n\t\t\t// ctx.lineTo(this.x, this.y);\n\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);\n\t\t\t// ctx.stroke();\n\n\t\t\t// ctx.restore();\n\n\n\n\t\t}\n\t});\n\n\tChart.Arc = Chart.Element.extend({\n\t\tinRange : function(chartX,chartY){\n\n\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {\n\t\t\t\tx: chartX,\n\t\t\t\ty: chartY\n\t\t\t});\n\n\t\t\t// Normalize all angles to 0 - 2*PI (0 - 360°)\n\t\t\tvar pointRelativeAngle = pointRelativePosition.angle % (Math.PI * 2),\n\t\t\t    startAngle = (Math.PI * 2 + this.startAngle) % (Math.PI * 2),\n\t\t\t    endAngle = (Math.PI * 2 + this.endAngle) % (Math.PI * 2) || 360;\n\n\t\t\t// Calculate wether the pointRelativeAngle is between the start and the end angle\n\t\t\tvar betweenAngles = (endAngle < startAngle) ?\n\t\t\t\tpointRelativeAngle <= endAngle || pointRelativeAngle >= startAngle:\n\t\t\t\tpointRelativeAngle >= startAngle && pointRelativeAngle <= endAngle;\n\n\t\t\t//Check if within the range of the open/close angle\n\t\t\tvar withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t//Ensure within the outside of the arc centre, but inside arc outer\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),\n\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;\n\t\t\treturn {\n\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t};\n\t\t},\n\t\tdraw : function(animationPercent){\n\n\t\t\tvar easingDecimal = animationPercent || 1;\n\n\t\t\tvar ctx = this.ctx;\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(this.x, this.y, this.outerRadius < 0 ? 0 : this.outerRadius, this.startAngle, this.endAngle);\n\n            ctx.arc(this.x, this.y, this.innerRadius < 0 ? 0 : this.innerRadius, this.endAngle, this.startAngle, true);\n\n\t\t\tctx.closePath();\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\tctx.fill();\n\t\t\tctx.lineJoin = 'bevel';\n\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Rectangle = Chart.Element.extend({\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\thalfWidth = this.width/2,\n\t\t\t\tleftX = this.x - halfWidth,\n\t\t\t\trightX = this.x + halfWidth,\n\t\t\t\ttop = this.base - (this.base - this.y),\n\t\t\t\thalfStroke = this.strokeWidth / 2;\n\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\tif (this.showStroke){\n\t\t\t\tleftX += halfStroke;\n\t\t\t\trightX -= halfStroke;\n\t\t\t\ttop += halfStroke;\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.fillStyle = this.fillColor;\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t// It'd be nice to keep this class totally generic to any rectangle\n\t\t\t// and simply specify which border to miss out.\n\t\t\tctx.moveTo(leftX, this.base);\n\t\t\tctx.lineTo(leftX, top);\n\t\t\tctx.lineTo(rightX, top);\n\t\t\tctx.lineTo(rightX, this.base);\n\t\t\tctx.fill();\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\theight : function(){\n\t\t\treturn this.base - this.y;\n\t\t},\n\t\tinRange : function(chartX,chartY){\n\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\n\t\t}\n\t});\n\n\tChart.Animation = Chart.Element.extend({\n\t\tcurrentStep: null, // the current animation step\n\t\tnumSteps: 60, // default number of steps\n\t\teasing: \"\", // the easing to use for this animation\n\t\trender: null, // render function used by the animation service\n\t\t\n\t\tonAnimationProgress: null, // user specified callback to fire on each step of the animation \n\t\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n\t});\n\t\n\tChart.Tooltip = Chart.Element.extend({\n\t\tdraw : function(){\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.xAlign = \"center\";\n\t\t\tthis.yAlign = \"above\";\n\n\t\t\t//Distance between the actual element.y position and the start of the tooltip caret\n\t\t\tvar caretPadding = this.caretPadding = 2;\n\n\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,\n\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,\n\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;\n\n\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){\n\t\t\t\tthis.xAlign = \"left\";\n\t\t\t} else if (this.x - tooltipWidth/2 < 0){\n\t\t\t\tthis.xAlign = \"right\";\n\t\t\t}\n\n\t\t\tif (this.y - tooltipHeight < 0){\n\t\t\t\tthis.yAlign = \"below\";\n\t\t\t}\n\n\n\t\t\tvar tooltipX = this.x - tooltipWidth/2,\n\t\t\t\ttooltipY = this.y - tooltipHeight;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tswitch(this.yAlign)\n\t\t\t\t{\n\t\t\t\tcase \"above\":\n\t\t\t\t\t//Draw a caret above the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"below\":\n\t\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;\n\t\t\t\t\t//Draw a caret below the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tswitch(this.xAlign)\n\t\t\t\t{\n\t\t\t\tcase \"left\":\n\t\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);\n\n\t\t\t\tctx.fill();\n\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.MultiTooltip = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);\n\n\t\t\tthis.titleHeight = this.title ? this.titleFontSize * 1.5 : 0;\n\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleHeight;\n\n\t\t\tthis.ctx.font = this.titleFont;\n\n\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,\n\t\t\t\t//Label has a legend square as well so account for this.\n\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,\n\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);\n\n\t\t\tthis.width = longestTextWidth + (this.xPadding*2);\n\n\n\t\t\tvar halfHeight = this.height/2;\n\n\t\t\t//Check to ensure the height will fit on the canvas\n\t\t\tif (this.y - halfHeight < 0 ){\n\t\t\t\tthis.y = halfHeight;\n\t\t\t} else if (this.y + halfHeight > this.chart.height){\n\t\t\t\tthis.y = this.chart.height - halfHeight;\n\t\t\t}\n\n\t\t\t//Decide whether to align left or right based on position on canvas\n\t\t\tif (this.x > this.chart.width/2){\n\t\t\t\tthis.x -= this.xOffset + this.width;\n\t\t\t} else {\n\t\t\t\tthis.x += this.xOffset;\n\t\t\t}\n\n\n\t\t},\n\t\tgetLineHeight : function(index){\n\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,\n\t\t\t\tafterTitleIndex = index-1;\n\n\t\t\t//If the index is zero, we're getting the title\n\t\t\tif (index === 0){\n\t\t\t\treturn baseLineHeight + this.titleHeight / 3;\n\t\t\t} else{\n\t\t\t\treturn baseLineHeight + ((this.fontSize * 1.5 * afterTitleIndex) + this.fontSize / 2) + this.titleHeight;\n\t\t\t}\n\n\t\t},\n\t\tdraw : function(){\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\t\t\tctx.fill();\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.textAlign = \"left\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillStyle = this.titleTextColor;\n\t\t\t\tctx.font = this.titleFont;\n\n\t\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));\n\n\t\t\t\tctx.font = this.font;\n\t\t\t\thelpers.each(this.labels,function(label,index){\n\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));\n\n\t\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)\n\t\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.\n\n\t\t\t\t\tctx.fillStyle = this.legendColorBackground;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\t\t\t\t\tctx.fillStyle = this.legendColors[index].fill;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\n\t\t\t\t},this);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Scale = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.fit();\n\t\t},\n\t\tbuildYLabels : function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) + 10 : 0;\n\t\t},\n\t\taddXLabel : function(label){\n\t\t\tthis.xLabels.push(label);\n\t\t\tthis.valuesCount++;\n\t\t\tthis.fit();\n\t\t},\n\t\tremoveXLabel : function(){\n\t\t\tthis.xLabels.shift();\n\t\t\tthis.valuesCount--;\n\t\t\tthis.fit();\n\t\t},\n\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use\n\t\tfit: function(){\n\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated\n\n\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation\n\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;\n\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels\n\n\t\t\t// Apply padding settings to the start and end point.\n\t\t\tthis.startPoint += this.padding;\n\t\t\tthis.endPoint -= this.padding;\n\n\t\t\t// Cache the starting endpoint, excluding the space for x labels\n\t\t\tvar cachedEndPoint = this.endPoint;\n\n\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis\n\t\t\tvar cachedHeight = this.endPoint - this.startPoint,\n\t\t\t\tcachedYLabelWidth;\n\n\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start\n\t\t\t/*\n\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:\n\t\t\t *\n\t\t\t\tthis.steps;\n\t\t\t\tthis.stepValue;\n\t\t\t\tthis.min;\n\t\t\t\tthis.max;\n\t\t\t *\n\t\t\t */\n\t\t\tthis.calculateYRange(cachedHeight);\n\n\t\t\t// With these properties set we can now build the array of yLabels\n\t\t\t// and also the width of the largest yLabel\n\t\t\tthis.buildYLabels();\n\n\t\t\tthis.calculateXLabelRotation();\n\n\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){\n\t\t\t\tcachedHeight = this.endPoint - this.startPoint;\n\t\t\t\tcachedYLabelWidth = this.yLabelWidth;\n\n\t\t\t\tthis.calculateYRange(cachedHeight);\n\t\t\t\tthis.buildYLabels();\n\n\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed\n\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){\n\t\t\t\t\tthis.endPoint = cachedEndPoint;\n\t\t\t\t\tthis.calculateXLabelRotation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tcalculateXLabelRotation : function(){\n\t\t\t//Get the width of each grid by calculating the difference\n\t\t\t//between x offsets between 0 and 1.\n\n\t\t\tthis.ctx.font = this.font;\n\n\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,\n\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,\n\t\t\t\tfirstRotated,\n\t\t\t\tlastRotated;\n\n\n\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;\n\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth) ? firstWidth/2 : this.yLabelWidth;\n\n\t\t\tthis.xLabelRotation = 0;\n\t\t\tif (this.display){\n\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),\n\t\t\t\t\tcosRotation,\n\t\t\t\t\tfirstRotatedWidth;\n\t\t\t\tthis.xLabelWidth = originalLabelWidth;\n\t\t\t\t//Allow 3 pixels x2 padding either side for label readability\n\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;\n\n\t\t\t\t//Max label rotate should be 90 - also act as a loop counter\n\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\n\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));\n\n\t\t\t\t\tfirstRotated = cosRotation * firstWidth;\n\t\t\t\t\tlastRotated = cosRotation * lastWidth;\n\n\t\t\t\t\t// We're right aligning the text now.\n\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth){\n\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;\n\n\n\t\t\t\t\tthis.xLabelRotation++;\n\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;\n\n\t\t\t\t}\n\t\t\t\tif (this.xLabelRotation > 0){\n\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.xLabelWidth = 0;\n\t\t\t\tthis.xScalePaddingRight = this.padding;\n\t\t\t\tthis.xScalePaddingLeft = this.padding;\n\t\t\t}\n\n\t\t},\n\t\t// Needs to be overidden in each Chart type\n\t\t// Otherwise we need to pass all the data into the scale class\n\t\tcalculateYRange: noop,\n\t\tdrawingArea: function(){\n\t\t\treturn this.startPoint - this.endPoint;\n\t\t},\n\t\tcalculateY : function(value){\n\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);\n\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));\n\t\t},\n\t\tcalculateX : function(index){\n\t\t\tvar isRotated = (this.xLabelRotation > 0),\n\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\n\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),\n\t\t\t\tvalueWidth = innerWidth/Math.max((this.valuesCount - ((this.offsetGridLines) ? 0 : 1)), 1),\n\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;\n\n\t\t\tif (this.offsetGridLines){\n\t\t\t\tvalueOffset += (valueWidth/2);\n\t\t\t}\n\n\t\t\treturn Math.round(valueOffset);\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\thelpers.extend(this, newProps);\n\t\t\tthis.fit();\n\t\t},\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,\n\t\t\t\txStart = Math.round(this.xScalePaddingLeft);\n\t\t\tif (this.display){\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.font = this.font;\n\t\t\t\teach(this.yLabels,function(labelString,index){\n\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),\n\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter),\n\t\t\t\t\t\tdrawHorizontalLine = this.showHorizontalLines;\n\n\t\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tif (this.showLabels){\n\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);\n\t\t\t\t\t}\n\n\t\t\t\t\t// This is X axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawHorizontalLine){\n\t\t\t\t\t\tdrawHorizontalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawHorizontalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);\n\n\t\t\t\t\tif(drawHorizontalLine){\n\t\t\t\t\t\tctx.moveTo(xStart, linePositionY);\n\t\t\t\t\t\tctx.lineTo(this.width, linePositionY);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);\n\t\t\t\t\tctx.lineTo(xStart, linePositionY);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t},this);\n\n\t\t\t\teach(this.xLabels,function(label,index){\n\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line\n\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0),\n\t\t\t\t\t\tdrawVerticalLine = this.showVerticalLines;\n\n\t\t\t\t\t// This is Y axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawVerticalLine){\n\t\t\t\t\t\tdrawVerticalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\n\n\t\t\t\t\t// Small lines at the bottom of the base grid line\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);\n\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);\n\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";\n\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";\n\t\t\t\t\tctx.fillText(label, 0, 0);\n\t\t\t\t\tctx.restore();\n\t\t\t\t},this);\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\tChart.RadialScale = Chart.Element.extend({\n\t\tinitialize: function(){\n\t\t\tthis.size = min([this.height, this.width]);\n\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t},\n\t\tcalculateCenterOffset: function(value){\n\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);\n\n\t\t\treturn (value - this.min) * scalingFactor;\n\t\t},\n\t\tupdate : function(){\n\t\t\tif (!this.lineArc){\n\t\t\t\tthis.setScaleSize();\n\t\t\t} else {\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t\t}\n\t\t\tthis.buildYLabels();\n\t\t},\n\t\tbuildYLabels: function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t},\n\t\tgetCircumference : function(){\n\t\t\treturn ((Math.PI*2) / this.valuesCount);\n\t\t},\n\t\tsetScaleSize: function(){\n\t\t\t/*\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t *\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t *\n\t\t\t * Solution:\n\t\t\t *\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t * at each index we check if the text overlaps.\n\t\t\t *\n\t\t\t * Where it does, we store that angle and that index.\n\t\t\t *\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t *\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t * along with labels.\n\t\t\t *\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t *\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t * and position it in the most space efficient manner\n\t\t\t *\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t */\n\n\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),\n\t\t\t\tpointPosition,\n\t\t\t\ti,\n\t\t\t\ttextWidth,\n\t\t\t\thalfTextWidth,\n\t\t\t\tfurthestRight = this.width,\n\t\t\t\tfurthestRightIndex,\n\t\t\t\tfurthestRightAngle,\n\t\t\t\tfurthestLeft = 0,\n\t\t\t\tfurthestLeftIndex,\n\t\t\t\tfurthestLeftAngle,\n\t\t\t\txProtrusionLeft,\n\t\t\t\txProtrusionRight,\n\t\t\t\tradiusReductionRight,\n\t\t\t\tradiusReductionLeft,\n\t\t\t\tmaxWidthRadius;\n\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\tfor (i=0;i<this.valuesCount;i++){\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\n\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;\n\t\t\t\tif (i === 0 || i === this.valuesCount/2){\n\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\n\t\t\t\t\t// w/left and right text sizes\n\t\t\t\t\thalfTextWidth = textWidth/2;\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i < this.valuesCount/2) {\n\t\t\t\t\t// Less than half the values means we'll left align the text\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i > this.valuesCount/2){\n\t\t\t\t\t// More than half the values means we'll right align the text\n\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txProtrusionLeft = furthestLeft;\n\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\n\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\n\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\n\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);\n\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);\n\n\t\t\t// Ensure we actually need to reduce the size of the chart\n\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\n\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\n\n\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;\n\n\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\n\n\t\t},\n\t\tsetCenterPoint: function(leftMovement, rightMovement){\n\n\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,\n\t\t\t\tmaxLeft = leftMovement + this.drawingArea;\n\n\t\t\tthis.xCenter = (maxLeft + maxRight)/2;\n\t\t\t// Always vertically in the centre as the text height doesn't change\n\t\t\tthis.yCenter = (this.height/2);\n\t\t},\n\n\t\tgetIndexAngle : function(index){\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\n\t\t\treturn index * angleMultiplier - (Math.PI/2);\n\t\t},\n\t\tgetPointPosition : function(index, distanceFromCenter){\n\t\t\tvar thisAngle = this.getIndexAngle(index);\n\t\t\treturn {\n\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,\n\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter\n\t\t\t};\n\t\t},\n\t\tdraw: function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\teach(this.yLabels, function(label, index){\n\t\t\t\t\t// Don't draw a centre value\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),\n\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,\n\t\t\t\t\t\t\tpointPosition;\n\n\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\tif (this.lineWidth > 0){\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\n\t\t\t\t\t\t\tif(this.lineArc){\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));\n\t\t\t\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.showLabels){\n\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\t\t\t\t\t\tif (this.showLabelBackdrop){\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;\n\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,\n\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,\n\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,\n\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;\n\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\n\t\t\t\tif (!this.lineArc){\n\t\t\t\t\tctx.lineWidth = this.angleLineWidth;\n\t\t\t\t\tctx.strokeStyle = this.angleLineColor;\n\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar centerOffset = null, outerPosition = null;\n\n\t\t\t\t\t\tif (this.angleLineWidth > 0 && (i % this.angleLineInterval === 0)){\n\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.backgroundColors && this.backgroundColors.length == this.valuesCount) {\n\t\t\t\t\t\t\tif (centerOffset == null)\n\t\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\n\t\t\t\t\t\t\tif (outerPosition == null)\n\t\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\n\t\t\t\t\t\t\tvar previousOuterPosition = this.getPointPosition(i === 0 ? this.valuesCount - 1 : i - 1, centerOffset);\n\t\t\t\t\t\t\tvar nextOuterPosition = this.getPointPosition(i === this.valuesCount - 1 ? 0 : i + 1, centerOffset);\n\n\t\t\t\t\t\t\tvar previousOuterHalfway = { x: (previousOuterPosition.x + outerPosition.x) / 2, y: (previousOuterPosition.y + outerPosition.y) / 2 };\n\t\t\t\t\t\t\tvar nextOuterHalfway = { x: (outerPosition.x + nextOuterPosition.x) / 2, y: (outerPosition.y + nextOuterPosition.y) / 2 };\n\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(previousOuterHalfway.x, previousOuterHalfway.y);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.lineTo(nextOuterHalfway.x, nextOuterHalfway.y);\n\t\t\t\t\t\t\tctx.fillStyle = this.backgroundColors[i];\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);\n\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;\n\n\t\t\t\t\t\tvar labelsCount = this.labels.length,\n\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,\n\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,\n\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),\n\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);\n\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if(i === halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if (i < halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\n\t\t\t\t\t\tif (exactQuarter){\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t} else if (upperHalf){\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.animationService = {\n\t\tframeDuration: 17,\n\t\tanimations: [],\n\t\tdropFrames: 0,\n\t\taddAnimation: function(chartInstance, animationObject) {\n\t\t\tfor (var index = 0; index < this.animations.length; ++ index){\n\t\t\t\tif (this.animations[index].chartInstance === chartInstance){\n\t\t\t\t\t// replacing an in progress animation\n\t\t\t\t\tthis.animations[index].animationObject = animationObject;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.animations.push({\n\t\t\t\tchartInstance: chartInstance,\n\t\t\t\tanimationObject: animationObject\n\t\t\t});\n\n\t\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\t\tif (this.animations.length == 1) {\n\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t}\n\t\t},\n\t\t// Cancel the animation for a given chart instance\n\t\tcancelAnimation: function(chartInstance) {\n\t\t\tvar index = helpers.findNextWhere(this.animations, function(animationWrapper) {\n\t\t\t\treturn animationWrapper.chartInstance === chartInstance;\n\t\t\t});\n\t\t\t\n\t\t\tif (index)\n\t\t\t{\n\t\t\t\tthis.animations.splice(index, 1);\n\t\t\t}\n\t\t},\n\t\t// calls startDigest with the proper context\n\t\tdigestWrapper: function() {\n\t\t\tChart.animationService.startDigest.call(Chart.animationService);\n\t\t},\n\t\tstartDigest: function() {\n\n\t\t\tvar startTime = Date.now();\n\t\t\tvar framesToDrop = 0;\n\n\t\t\tif(this.dropFrames > 1){\n\t\t\t\tframesToDrop = Math.floor(this.dropFrames);\n\t\t\t\tthis.dropFrames -= framesToDrop;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < this.animations.length; i++) {\n\n\t\t\t\tif (this.animations[i].animationObject.currentStep === null){\n\t\t\t\t\tthis.animations[i].animationObject.currentStep = 0;\n\t\t\t\t}\n\n\t\t\t\tthis.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\t\t\t\tif(this.animations[i].animationObject.currentStep > this.animations[i].animationObject.numSteps){\n\t\t\t\t\tthis.animations[i].animationObject.currentStep = this.animations[i].animationObject.numSteps;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.animations[i].animationObject.render(this.animations[i].chartInstance, this.animations[i].animationObject);\n\t\t\t\t\n\t\t\t\t// Check if executed the last frame.\n\t\t\t\tif (this.animations[i].animationObject.currentStep == this.animations[i].animationObject.numSteps){\n\t\t\t\t\t// Call onAnimationComplete\n\t\t\t\t\tthis.animations[i].animationObject.onAnimationComplete.call(this.animations[i].chartInstance);\n\t\t\t\t\t// Remove the animation.\n\t\t\t\t\tthis.animations.splice(i, 1);\n\t\t\t\t\t// Keep the index in place to offset the splice\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar endTime = Date.now();\n\t\t\tvar delay = endTime - startTime - this.frameDuration;\n\t\t\tvar frameDelay = delay / this.frameDuration;\n\n\t\t\tif(frameDelay > 1){\n\t\t\t\tthis.dropFrames += frameDelay;\n\t\t\t}\n\n\t\t\t// Do we have more stuff to animate?\n\t\t\tif (this.animations.length > 0){\n\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Attach global event to resize each chart instance when the browser resizes\n\thelpers.addEvent(window, \"resize\", (function(){\n\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.\n\t\tvar timeout;\n\t\treturn function(){\n\t\t\tclearTimeout(timeout);\n\t\t\ttimeout = setTimeout(function(){\n\t\t\t\teach(Chart.instances,function(instance){\n\t\t\t\t\t// If the responsive flag is set in the chart instance config\n\t\t\t\t\t// Cascade the resize event down to the chart.\n\t\t\t\t\tif (instance.options.responsive){\n\t\t\t\t\t\tinstance.resize(instance.render, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 50);\n\t\t};\n\t})());\n\n\n\tif (amd) {\n\t\tdefine('Chart', [], function(){\n\t\t\treturn Chart;\n\t\t});\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = Chart;\n\t}\n\n\troot.Chart = Chart;\n\n\tChart.noConflict = function(){\n\t\troot.Chart = previous;\n\t\treturn Chart;\n\t};\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\n\tvar defaultConfig = {\n\t\t//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\tscaleBeginAtZero : true,\n\n\t\t//Boolean - Whether grid lines are shown across the chart\n\t\tscaleShowGridLines : true,\n\n\t\t//String - Colour of the grid lines\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n\t\t//Number - Width of the grid lines\n\t\tscaleGridLineWidth : 1,\n\n\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\tscaleShowHorizontalLines: true,\n\n\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\tscaleShowVerticalLines: true,\n\n\t\t//Boolean - If there is a stroke on each bar\n\t\tbarShowStroke : true,\n\n\t\t//Number - Pixel width of the bar stroke\n\t\tbarStrokeWidth : 2,\n\n\t\t//Number - Spacing between each of the X value sets\n\t\tbarValueSpacing : 5,\n\n\t\t//Number - Spacing between data sets within X values\n\t\tbarDatasetSpacing : 1,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\"\n\n\t};\n\n\n\tChart.Type.extend({\n\t\tname: \"Bar\",\n\t\tdefaults : defaultConfig,\n\t\tinitialize:  function(data){\n\n\t\t\t//Expose options as a scope variable here so we can access it in the ScaleClass\n\t\t\tvar options = this.options;\n\n\t\t\tthis.ScaleClass = Chart.Scale.extend({\n\t\t\t\toffsetGridLines : true,\n\t\t\t\tcalculateBarX : function(datasetCount, datasetIndex, barIndex){\n\t\t\t\t\t//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar\n\t\t\t\t\tvar xWidth = this.calculateBaseWidth(),\n\t\t\t\t\t\txAbsolute = this.calculateX(barIndex) - (xWidth/2),\n\t\t\t\t\t\tbarWidth = this.calculateBarWidth(datasetCount);\n\n\t\t\t\t\treturn xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;\n\t\t\t\t},\n\t\t\t\tcalculateBaseWidth : function(){\n\t\t\t\t\treturn (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);\n\t\t\t\t},\n\t\t\t\tcalculateBarWidth : function(datasetCount){\n\t\t\t\t\t//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset\n\t\t\t\t\tvar baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);\n\n\t\t\t\t\treturn (baseWidth / datasetCount);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];\n\n\t\t\t\t\tthis.eachBars(function(bar){\n\t\t\t\t\t\tbar.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeBars, function(activeBar){\n\t\t\t\t\t\tif (activeBar) {\n\t\t\t\t\t\t\tactiveBar.fillColor = activeBar.highlightFill;\n\t\t\t\t\t\t\tactiveBar.strokeColor = activeBar.highlightStroke;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeBars);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\tthis.BarClass = Chart.Rectangle.extend({\n\t\t\t\tstrokeWidth : this.options.barStrokeWidth,\n\t\t\t\tshowStroke : this.options.barShowStroke,\n\t\t\t\tctx : this.chart.ctx\n\t\t\t});\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset,datasetIndex){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tbars : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tdatasetObject.bars.push(new this.BarClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tstrokeColor : (typeof dataset.strokeColor == 'object') ? dataset.strokeColor[index] : dataset.strokeColor,\n\t\t\t\t\t\tfillColor : (typeof dataset.fillColor == 'object') ? dataset.fillColor[index] : dataset.fillColor,\n\t\t\t\t\t\thighlightFill : (dataset.highlightFill) ? (typeof dataset.highlightFill == 'object') ? dataset.highlightFill[index] : dataset.highlightFill : (typeof dataset.fillColor == 'object') ? dataset.fillColor[index] : dataset.fillColor,\n\t\t\t\t\t\thighlightStroke : (dataset.highlightStroke) ? (typeof dataset.highlightStroke == 'object') ? dataset.highlightStroke[index] : dataset.highlightStroke : (typeof dataset.strokeColor == 'object') ? dataset.strokeColor[index] : dataset.strokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t},this);\n\n\t\t\tthis.buildScale(data.labels);\n\n\t\t\tthis.BarClass.prototype.base = this.scale.endPoint;\n\n\t\t\tthis.eachBars(function(bar, index, datasetIndex){\n\t\t\t\thelpers.extend(bar, {\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t});\n\t\t\t\tbar.save();\n\t\t\t}, this);\n\n\t\t\tthis.render();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.scale.update();\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t});\n\n\t\t\tthis.eachBars(function(bar){\n\t\t\t\tbar.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\t\teachBars : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset, datasetIndex){\n\t\t\t\thelpers.each(dataset.bars, callback, this, datasetIndex);\n\t\t\t},this);\n\t\t},\n\t\tgetBarsAtEvent : function(e){\n\t\t\tvar barsArray = [],\n\t\t\t\teventPosition = helpers.getRelativePosition(e),\n\t\t\t\tdatasetIterator = function(dataset){\n\t\t\t\t\tbarsArray.push(dataset.bars[barIndex]);\n\t\t\t\t},\n\t\t\t\tbarIndex;\n\n\t\t\tfor (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {\n\t\t\t\tfor (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {\n\t\t\t\t\tif (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){\n\t\t\t\t\t\thelpers.each(this.datasets, datasetIterator);\n\t\t\t\t\t\treturn barsArray;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn barsArray;\n\t\t},\n\t\tbuildScale : function(labels){\n\t\t\tvar self = this;\n\n\t\t\tvar dataTotal = function(){\n\t\t\t\tvar values = [];\n\t\t\t\tself.eachBars(function(bar){\n\t\t\t\t\tvalues.push(bar.value);\n\t\t\t\t});\n\t\t\t\treturn values;\n\t\t\t};\n\n\t\t\tvar scaleOptions = {\n\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\tvaluesCount : labels.length,\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\tcalculateYRange: function(currentHeight){\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t);\n\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t},\n\t\t\t\txLabels : labels,\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\tpadding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\tdisplay : this.options.showScale\n\t\t\t};\n\n\t\t\tif (this.options.scaleOverride){\n\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.scale = new this.ScaleClass(scaleOptions);\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\tthis.datasets[datasetIndex].bars.push(new this.BarClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),\n\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\n\t\t\t\t\tbase : this.scale.endPoint,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].strokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].fillColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.addXLabel(label);\n\t\t\t//Then re-render the chart.\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.removeXLabel();\n\t\t\t//Then re-render the chart.\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.bars.shift();\n\t\t\t},this);\n\t\t\tthis.update();\n\t\t},\n\t\treflow : function(){\n\t\t\thelpers.extend(this.BarClass.prototype,{\n\t\t\t\ty: this.scale.endPoint,\n\t\t\t\tbase : this.scale.endPoint\n\t\t\t});\n\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width\n\t\t\t});\n\t\t\tthis.scale.update(newScaleProps);\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tthis.clear();\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\tthis.scale.draw(easingDecimal);\n\n\t\t\t//Draw all the bars for each dataset\n\t\t\thelpers.each(this.datasets,function(dataset,datasetIndex){\n\t\t\t\thelpers.each(dataset.bars,function(bar,index){\n\t\t\t\t\tif (bar.hasValue()){\n\t\t\t\t\t\tbar.base = this.scale.endPoint;\n\t\t\t\t\t\t//Transition then draw\n\t\t\t\t\t\tbar.transition({\n\t\t\t\t\t\t\tx : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\n\t\t\t\t\t\t\ty : this.scale.calculateY(bar.value),\n\t\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length)\n\t\t\t\t\t\t}, easingDecimal).draw();\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\t\t\t},this);\n\t\t}\n\t});\n\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\t//Cache a local reference to Chart.helpers\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\t//Boolean - Whether we should show a stroke on each segment\n\t\tsegmentShowStroke : true,\n\n\t\t//String - The colour of each segment stroke\n\t\tsegmentStrokeColor : \"#fff\",\n\n\t\t//Number - The width of each segment stroke\n\t\tsegmentStrokeWidth : 2,\n\n\t\t//The percentage of the chart that we cut out of the middle.\n\t\tpercentageInnerCutout : 50,\n\n\t\t//Number - Amount of animation steps\n\t\tanimationSteps : 100,\n\n\t\t//String - Animation easing effect\n\t\tanimationEasing : \"easeOutBounce\",\n\n\t\t//Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate : true,\n\n\t\t//Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale : false,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>\"\n\n\t};\n\n\tChart.Type.extend({\n\t\t//Passing in a name registers this chart in the Chart namespace\n\t\tname: \"Doughnut\",\n\t\t//Providing a defaults will also register the defaults in the chart namespace\n\t\tdefaults : defaultConfig,\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\tinitialize:  function(data){\n\n\t\t\t//Declare segments as a static property to prevent inheriting across the Chart type prototype\n\t\t\tthis.segments = [];\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\n\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.calculateTotal(data);\n\n\t\t\thelpers.each(data,function(datapoint, index){\n\t\t\t\tif (!datapoint.color) {\n\t\t\t\t\tdatapoint.color = 'hsl(' + (360 * index / data.length) + ', 100%, 50%)';\n\t\t\t\t}\n\t\t\t\tthis.addData(datapoint, index, true);\n\t\t\t},this);\n\n\t\t\tthis.render();\n\t\t},\n\t\tgetSegmentsAtEvent : function(e){\n\t\t\tvar segmentsArray = [];\n\n\t\t\tvar location = helpers.getRelativePosition(e);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t},this);\n\t\t\treturn segmentsArray;\n\t\t},\n\t\taddData : function(segment, atIndex, silent){\n\t\t\tvar index = atIndex !== undefined ? atIndex : this.segments.length;\n\t\t\tif ( typeof(segment.color) === \"undefined\" ) {\n\t\t\t\tsegment.color = Chart.defaults.global.segmentColorDefault[index % Chart.defaults.global.segmentColorDefault.length];\n\t\t\t\tsegment.highlight = Chart.defaults.global.segmentHighlightColorDefaults[index % Chart.defaults.global.segmentHighlightColorDefaults.length];\t\t\t\t\n\t\t\t}\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\tvalue : segment.value,\n\t\t\t\touterRadius : (this.options.animateScale) ? 0 : this.outerRadius,\n\t\t\t\tinnerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,\n\t\t\t\tfillColor : segment.color,\n\t\t\t\thighlightColor : segment.highlight || segment.color,\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\tstartAngle : Math.PI * 1.5,\n\t\t\t\tcircumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),\n\t\t\t\tlabel : segment.label\n\t\t\t}));\n\t\t\tif (!silent){\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t},\n\t\tcalculateCircumference : function(value) {\n\t\t\tif ( this.total > 0 ) {\n\t\t\t\treturn (Math.PI*2)*(value / this.total);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\tcalculateTotal : function(data){\n\t\t\tthis.total = 0;\n\t\t\thelpers.each(data,function(segment){\n\t\t\t\tthis.total += Math.abs(segment.value);\n\t\t\t},this);\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.calculateTotal(this.segments);\n\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor']);\n\t\t\t});\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tsegment.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\n\t\tremoveData: function(atIndex){\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\n\t\treflow : function(){\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\n\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\tsegment.update({\n\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t});\n\t\t\t}, this);\n\t\t},\n\t\tdraw : function(easeDecimal){\n\t\t\tvar animDecimal = (easeDecimal) ? easeDecimal : 1;\n\t\t\tthis.clear();\n\t\t\thelpers.each(this.segments,function(segment,index){\n\t\t\t\tsegment.transition({\n\t\t\t\t\tcircumference : this.calculateCircumference(segment.value),\n\t\t\t\t\touterRadius : this.outerRadius,\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\n\t\t\t\t},animDecimal);\n\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\n\t\t\t\tsegment.draw();\n\t\t\t\tif (index === 0){\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t}\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\tif (index < this.segments.length-1){\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t}\n\t\t\t},this);\n\n\t\t}\n\t});\n\n\tChart.types.Doughnut.extend({\n\t\tname : \"Pie\",\n\t\tdefaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})\n\t});\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\n\t\t///Boolean - Whether grid lines are shown across the chart\n\t\tscaleShowGridLines : true,\n\n\t\t//String - Colour of the grid lines\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n\t\t//Number - Width of the grid lines\n\t\tscaleGridLineWidth : 1,\n\n\t\t//Boolean - Whether to show horizontal lines (except X axis)\n\t\tscaleShowHorizontalLines: true,\n\n\t\t//Boolean - Whether to show vertical lines (except Y axis)\n\t\tscaleShowVerticalLines: true,\n\n\t\t//Boolean - Whether the line is curved between points\n\t\tbezierCurve : true,\n\n\t\t//Number - Tension of the bezier curve between points\n\t\tbezierCurveTension : 0.4,\n\n\t\t//Boolean - Whether to show a dot for each point\n\t\tpointDot : true,\n\n\t\t//Number - Radius of each point dot in pixels\n\t\tpointDotRadius : 4,\n\n\t\t//Number - Pixel width of point dot stroke\n\t\tpointDotStrokeWidth : 1,\n\n\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\tpointHitDetectionRadius : 20,\n\n\t\t//Boolean - Whether to show a stroke for datasets\n\t\tdatasetStroke : true,\n\n\t\t//Number - Pixel width of dataset stroke\n\t\tdatasetStrokeWidth : 2,\n\n\t\t//Boolean - Whether to fill the dataset with a colour\n\t\tdatasetFill : true,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\",\n\n\t\t//Boolean - Whether to horizontally center the label and point dot inside the grid\n\t\toffsetGridLines : false\n\n\t};\n\n\n\tChart.Type.extend({\n\t\tname: \"Line\",\n\t\tdefaults : defaultConfig,\n\t\tinitialize:  function(data){\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\n\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\toffsetGridLines : this.options.offsetGridLines,\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tinRange : function(mouseX){\n\t\t\t\t\treturn (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activePoints, function(activePoint){\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activePoints);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel : dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\tpoints : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t\tthis.buildScale(data.labels);\n\n\n\t\t\t\tthis.eachPoints(function(point, index){\n\t\t\t\t\thelpers.extend(point, {\n\t\t\t\t\t\tx: this.scale.calculateX(index),\n\t\t\t\t\t\ty: this.scale.endPoint\n\t\t\t\t\t});\n\t\t\t\t\tpoint.save();\n\t\t\t\t}, this);\n\n\t\t\t},this);\n\n\n\t\t\tthis.render();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.scale.update();\n\t\t\t// Reset any highlight colours before updating.\n\t\t\thelpers.each(this.activeElements, function(activeElement){\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\n\t\t\t});\n\t\t\tthis.eachPoints(function(point){\n\t\t\t\tpoint.save();\n\t\t\t});\n\t\t\tthis.render();\n\t\t},\n\t\teachPoints : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t},this);\n\t\t},\n\t\tgetPointsAtEvent : function(e){\n\t\t\tvar pointsArray = [],\n\t\t\t\teventPosition = helpers.getRelativePosition(e);\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\tif (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);\n\t\t\t\t});\n\t\t\t},this);\n\t\t\treturn pointsArray;\n\t\t},\n\t\tbuildScale : function(labels){\n\t\t\tvar self = this;\n\n\t\t\tvar dataTotal = function(){\n\t\t\t\tvar values = [];\n\t\t\t\tself.eachPoints(function(point){\n\t\t\t\t\tvalues.push(point.value);\n\t\t\t\t});\n\n\t\t\t\treturn values;\n\t\t\t};\n\n\t\t\tvar scaleOptions = {\n\t\t\t\ttemplateString : this.options.scaleLabel,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttextColor : this.options.scaleFontColor,\n\t\t\t\toffsetGridLines : this.options.offsetGridLines,\n\t\t\t\tfontSize : this.options.scaleFontSize,\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\n\t\t\t\tvaluesCount : labels.length,\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\n\t\t\t\tcalculateYRange : function(currentHeight){\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\n\t\t\t\t\t\tdataTotal(),\n\t\t\t\t\t\tcurrentHeight,\n\t\t\t\t\t\tthis.fontSize,\n\t\t\t\t\t\tthis.beginAtZero,\n\t\t\t\t\t\tthis.integersOnly\n\t\t\t\t\t);\n\t\t\t\t\thelpers.extend(this, updatedRanges);\n\t\t\t\t},\n\t\t\t\txLabels : labels,\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\n\t\t\t\tlineColor : this.options.scaleLineColor,\n\t\t\t\tshowHorizontalLines : this.options.scaleShowHorizontalLines,\n\t\t\t\tshowVerticalLines : this.options.scaleShowVerticalLines,\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\n\t\t\t\tpadding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\n\t\t\t\tdisplay : this.options.showScale\n\t\t\t};\n\n\t\t\tif (this.options.scaleOverride){\n\t\t\t\thelpers.extend(scaleOptions, {\n\t\t\t\t\tcalculateYRange: helpers.noop,\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tthis.scale = new Chart.Scale(scaleOptions);\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\tx: this.scale.calculateX(this.scale.valuesCount+1),\n\t\t\t\t\ty: this.scale.endPoint,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.addXLabel(label);\n\t\t\t//Then re-render the chart.\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.removeXLabel();\n\t\t\t//Then re-render the chart.\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.points.shift();\n\t\t\t},this);\n\t\t\tthis.update();\n\t\t},\n\t\treflow : function(){\n\t\t\tvar newScaleProps = helpers.extend({\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth : this.chart.width\n\t\t\t});\n\t\t\tthis.scale.update(newScaleProps);\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tthis.clear();\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\t// Some helper methods for getting the next/prev points\n\t\t\tvar hasValue = function(item){\n\t\t\t\treturn item.value !== null;\n\t\t\t},\n\t\t\tnextPoint = function(point, collection, index){\n\t\t\t\treturn helpers.findNextWhere(collection, hasValue, index) || point;\n\t\t\t},\n\t\t\tpreviousPoint = function(point, collection, index){\n\t\t\t\treturn helpers.findPreviousWhere(collection, hasValue, index) || point;\n\t\t\t};\n\n\t\t\tif (!this.scale) return;\n\t\t\tthis.scale.draw(easingDecimal);\n\n\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tvar pointsWithValues = helpers.where(dataset.points, hasValue);\n\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\t//We can use this extra loop to calculate the control points of this dataset also in this loop\n\n\t\t\t\thelpers.each(dataset.points, function(point, index){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.transition({\n\t\t\t\t\t\t\ty : this.scale.calculateY(point.value),\n\t\t\t\t\t\t\tx : this.scale.calculateX(index)\n\t\t\t\t\t\t}, easingDecimal);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\n\t\t\t\t// Control points need to be calculated in a separate loop, because we need to know the current x/y of the point\n\t\t\t\t// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed\n\t\t\t\tif (this.options.bezierCurve){\n\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\t\tvar tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;\n\t\t\t\t\t\tpoint.controlPoints = helpers.splineCurve(\n\t\t\t\t\t\t\tpreviousPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\tpoint,\n\t\t\t\t\t\t\tnextPoint(point, pointsWithValues, index),\n\t\t\t\t\t\t\ttension\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\n\t\t\t\t\t\t// Cap puter bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\tif (point.controlPoints.outer.y > this.scale.endPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.endPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (point.controlPoints.outer.y < this.scale.startPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.startPoint;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Cap inner bezier handles to the upper/lower scale bounds\n\t\t\t\t\t\tif (point.controlPoints.inner.y > this.scale.endPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.endPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (point.controlPoints.inner.y < this.scale.startPoint){\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.startPoint;\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\t\t\t}\n\n\n\t\t\t\t//Draw the line between all the points\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\tctx.beginPath();\n\n\t\t\t\thelpers.each(pointsWithValues, function(point, index){\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tctx.moveTo(point.x, point.y);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(this.options.bezierCurve){\n\t\t\t\t\t\t\tvar previous = previousPoint(point, pointsWithValues, index);\n\n\t\t\t\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.x,\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.y,\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.x,\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y,\n\t\t\t\t\t\t\t\tpoint.x,\n\t\t\t\t\t\t\t\tpoint.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\n\t\t\t\tif (this.options.datasetStroke) {\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\n\t\t\t\tif (this.options.datasetFill && pointsWithValues.length > 0){\n\t\t\t\t\t//Round off the line by going to the base of the chart, back to the start, then fill.\n\t\t\t\t\tctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);\n\t\t\t\t\tctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);\n\t\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\n\t\t\t\t//Now draw the points over the line\n\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t//lagging behind the point positions\n\t\t\t\thelpers.each(pointsWithValues,function(point){\n\t\t\t\t\tpoint.draw();\n\t\t\t\t});\n\t\t\t},this);\n\t\t}\n\t});\n\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\t//Cache a local reference to Chart.helpers\n\t\thelpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\t//Boolean - Show a backdrop to the scale label\n\t\tscaleShowLabelBackdrop : true,\n\n\t\t//String - The colour of the label backdrop\n\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\n\n\t\t// Boolean - Whether the scale should begin at zero\n\t\tscaleBeginAtZero : true,\n\n\t\t//Number - The backdrop padding above & below the label in pixels\n\t\tscaleBackdropPaddingY : 2,\n\n\t\t//Number - The backdrop padding to the side of the label in pixels\n\t\tscaleBackdropPaddingX : 2,\n\n\t\t//Boolean - Show line for each value in the scale\n\t\tscaleShowLine : true,\n\n\t\t//Boolean - Stroke a line around each segment in the chart\n\t\tsegmentShowStroke : true,\n\n\t\t//String - The colour of the stroke on each segment.\n\t\tsegmentStrokeColor : \"#fff\",\n\n\t\t//Number - The width of the stroke value in pixels\n\t\tsegmentStrokeWidth : 2,\n\n\t\t//Number - Amount of animation steps\n\t\tanimationSteps : 100,\n\n\t\t//String - Animation easing effect.\n\t\tanimationEasing : \"easeOutBounce\",\n\n\t\t//Boolean - Whether to animate the rotation of the chart\n\t\tanimateRotate : true,\n\n\t\t//Boolean - Whether to animate scaling the chart from the centre\n\t\tanimateScale : false,\n\n\t\t//String - A legend template\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>\"\n\t};\n\n\n\tChart.Type.extend({\n\t\t//Passing in a name registers this chart in the Chart namespace\n\t\tname: \"PolarArea\",\n\t\t//Providing a defaults will also register the defaults in the chart namespace\n\t\tdefaults : defaultConfig,\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\n\t\tinitialize:  function(data){\n\t\t\tthis.segments = [];\n\t\t\t//Declare segment class as a chart instance specific class, so it can share props for this instance\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\tinnerRadius : 0,\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\tlineArc: true,\n\t\t\t\twidth: this.chart.width,\n\t\t\t\theight: this.chart.height,\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\tvaluesCount: data.length\n\t\t\t});\n\n\t\t\tthis.updateScaleRange(data);\n\n\t\t\tthis.scale.update();\n\n\t\t\thelpers.each(data,function(segment,index){\n\t\t\t\tthis.addData(segment,index,true);\n\t\t\t},this);\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\n\t\t\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\n\t\t\t\t\t});\n\t\t\t\t\tthis.showTooltip(activeSegments);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\t\tgetSegmentsAtEvent : function(e){\n\t\t\tvar segmentsArray = [];\n\n\t\t\tvar location = helpers.getRelativePosition(e);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\n\t\t\t},this);\n\t\t\treturn segmentsArray;\n\t\t},\n\t\taddData : function(segment, atIndex, silent){\n\t\t\tvar index = atIndex || this.segments.length;\n\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\n\t\t\t\tfillColor: segment.color,\n\t\t\t\thighlightColor: segment.highlight || segment.color,\n\t\t\t\tlabel: segment.label,\n\t\t\t\tvalue: segment.value,\n\t\t\t\touterRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),\n\t\t\t\tcircumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),\n\t\t\t\tstartAngle: Math.PI * 1.5\n\t\t\t}));\n\t\t\tif (!silent){\n\t\t\t\tthis.reflow();\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t},\n\t\tremoveData: function(atIndex){\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\n\t\t\tthis.segments.splice(indexToDelete, 1);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\t\tcalculateTotal: function(data){\n\t\t\tthis.total = 0;\n\t\t\thelpers.each(data,function(segment){\n\t\t\t\tthis.total += segment.value;\n\t\t\t},this);\n\t\t\tthis.scale.valuesCount = this.segments.length;\n\t\t},\n\t\tupdateScaleRange: function(datapoints){\n\t\t\tvar valuesArray = [];\n\t\t\thelpers.each(datapoints,function(segment){\n\t\t\t\tvaluesArray.push(segment.value);\n\t\t\t});\n\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t{\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t} :\n\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\tvaluesArray,\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t);\n\n\t\t\thelpers.extend(\n\t\t\t\tthis.scale,\n\t\t\t\tscaleSizes,\n\t\t\t\t{\n\t\t\t\t\tsize: helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\t\tyCenter: this.chart.height/2\n\t\t\t\t}\n\t\t\t);\n\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.calculateTotal(this.segments);\n\n\t\t\thelpers.each(this.segments,function(segment){\n\t\t\t\tsegment.save();\n\t\t\t});\n\t\t\t\n\t\t\tthis.reflow();\n\t\t\tthis.render();\n\t\t},\n\t\treflow : function(){\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\n\t\t\t\tx : this.chart.width/2,\n\t\t\t\ty : this.chart.height/2\n\t\t\t});\n\t\t\tthis.updateScaleRange(this.segments);\n\t\t\tthis.scale.update();\n\n\t\t\thelpers.extend(this.scale,{\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2\n\t\t\t});\n\n\t\t\thelpers.each(this.segments, function(segment){\n\t\t\t\tsegment.update({\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t});\n\t\t\t}, this);\n\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\t//Clear & draw the canvas\n\t\t\tthis.clear();\n\t\t\thelpers.each(this.segments,function(segment, index){\n\t\t\t\tsegment.transition({\n\t\t\t\t\tcircumference : this.scale.getCircumference(),\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\n\t\t\t\t},easingDecimal);\n\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\n\n\t\t\t\t// If we've removed the first segment we need to set the first one to\n\t\t\t\t// start at the top.\n\t\t\t\tif (index === 0){\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\n\t\t\t\t}\n\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\n\t\t\t\tif (index < this.segments.length - 1){\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\n\t\t\t\t}\n\t\t\t\tsegment.draw();\n\t\t\t}, this);\n\t\t\tthis.scale.draw();\n\t\t}\n\t});\n\n}).call(this);\n\n(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\n\n\tChart.Type.extend({\n\t\tname: \"Radar\",\n\t\tdefaults:{\n\t\t\t//Boolean - Whether to show lines for each scale point\n\t\t\tscaleShowLine : true,\n\n\t\t\t//Boolean - Whether we show the angle lines out of the radar\n\t\t\tangleShowLineOut : true,\n\n\t\t\t//Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels : false,\n\n\t\t\t// Boolean - Whether the scale should begin at zero\n\t\t\tscaleBeginAtZero : true,\n\n\t\t\t//String - Colour of the angle line\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\n\n\t\t\t//Number - Pixel width of the angle line\n\t\t\tangleLineWidth : 1,\n\n\t\t\t//Number - Interval at which to draw angle lines (\"every Nth point\")\n\t\t\tangleLineInterval: 1,\n\n\t\t\t//String - Point label font declaration\n\t\t\tpointLabelFontFamily : \"'Arial'\",\n\n\t\t\t//String - Point label font weight\n\t\t\tpointLabelFontStyle : \"normal\",\n\n\t\t\t//Number - Point label font size in pixels\n\t\t\tpointLabelFontSize : 10,\n\n\t\t\t//String - Point label font colour\n\t\t\tpointLabelFontColor : \"#666\",\n\n\t\t\t//Boolean - Whether to show a dot for each point\n\t\t\tpointDot : true,\n\n\t\t\t//Number - Radius of each point dot in pixels\n\t\t\tpointDotRadius : 3,\n\n\t\t\t//Number - Pixel width of point dot stroke\n\t\t\tpointDotStrokeWidth : 1,\n\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\t\tpointHitDetectionRadius : 20,\n\n\t\t\t//Boolean - Whether to show a stroke for datasets\n\t\t\tdatasetStroke : true,\n\n\t\t\t//Number - Pixel width of dataset stroke\n\t\t\tdatasetStrokeWidth : 2,\n\n\t\t\t//Boolean - Whether to fill the dataset with a colour\n\t\t\tdatasetFill : true,\n\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\"\n\n\t\t},\n\n\t\tinitialize: function(data){\n\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\tctx : this.chart.ctx\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\tthis.buildScale(data);\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\n\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.showTooltip(activePointsCollection);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel: dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\tpoints : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tvar pointPosition;\n\t\t\t\t\tif (!this.scale.animation){\n\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));\n\t\t\t\t\t}\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,\n\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t},this);\n\n\t\t\tthis.render();\n\t\t},\n\t\teachPoints : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t},this);\n\t\t},\n\n\t\tgetPointsAtEvent : function(evt){\n\t\t\tvar mousePosition = helpers.getRelativePosition(evt),\n\t\t\t\tfromCenter = helpers.getAngleFromPoint({\n\t\t\t\t\tx: this.scale.xCenter,\n\t\t\t\t\ty: this.scale.yCenter\n\t\t\t\t}, mousePosition);\n\n\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,\n\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),\n\t\t\t\tactivePointsCollection = [];\n\n\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.\n\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){\n\t\t\t\tpointIndex = 0;\n\t\t\t}\n\n\t\t\tif (fromCenter.distance <= this.scale.drawingArea){\n\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn activePointsCollection;\n\t\t},\n\n\t\tbuildScale : function(data){\n\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\tbackgroundColors: this.options.scaleBackgroundColors,\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\tangleLineColor : this.options.angleLineColor,\n\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,\n        angleLineInterval: (this.options.angleLineInterval) ? this.options.angleLineInterval : 1,\n\t\t\t\t// Point labels at the edge of each line\n\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,\n\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,\n\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,\n\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth: this.chart.width,\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\tlabels: data.labels,\n\t\t\t\tvaluesCount: data.datasets[0].data.length\n\t\t\t});\n\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.updateScaleRange(data.datasets);\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tupdateScaleRange: function(datasets){\n\t\t\tvar valuesArray = (function(){\n\t\t\t\tvar totalDataArray = [];\n\t\t\t\thelpers.each(datasets,function(dataset){\n\t\t\t\t\tif (dataset.data){\n\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thelpers.each(dataset.points, function(point){\n\t\t\t\t\t\t\ttotalDataArray.push(point.value);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn totalDataArray;\n\t\t\t})();\n\n\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t{\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t} :\n\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\tvaluesArray,\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t);\n\n\t\t\thelpers.extend(\n\t\t\t\tthis.scale,\n\t\t\t\tscaleSizes\n\t\t\t);\n\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\t\t\tthis.scale.valuesCount++;\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\tx: pointPosition.x,\n\t\t\t\t\ty: pointPosition.y,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.labels.push(label);\n\n\t\t\tthis.reflow();\n\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.valuesCount--;\n\t\t\tthis.scale.labels.shift();\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.points.shift();\n\t\t\t},this);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.eachPoints(function(point){\n\t\t\t\tpoint.save();\n\t\t\t});\n\t\t\tthis.reflow();\n\t\t\tthis.render();\n\t\t},\n\t\treflow: function(){\n\t\t\thelpers.extend(this.scale, {\n\t\t\t\twidth : this.chart.width,\n\t\t\t\theight: this.chart.height,\n\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2\n\t\t\t});\n\t\t\tthis.updateScaleRange(this.datasets);\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easeDecimal = ease || 1,\n\t\t\t\tctx = this.chart.ctx;\n\t\t\tthis.clear();\n\t\t\tthis.scale.draw();\n\n\t\t\thelpers.each(this.datasets,function(dataset){\n\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\n\n\t\t\t\t//Draw the line between all the points\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\tctx.beginPath();\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tctx.moveTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\n\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\tif(this.options.datasetFill){\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t\t//Now draw the points over the line\n\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t//lagging behind the point positions\n\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.draw();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t},this);\n\n\t\t}\n\n\t});\n\n\n\n\n\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chart.js/Chart.js\n ** module id = 172\n ** module chunks = 0\n **/","module.exports = __webpack_amd_options__;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-options.js\n ** module id = 173\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('Doughnut', ['getSegmentsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/doughnut.js\n ** module id = 174\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('Line', ['getPointsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/line.js\n ** module id = 175\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('Pie', ['getSegmentsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/pie.js\n ** module id = 176\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('PolarArea', ['getSegmentsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/polar-area.js\n ** module id = 177\n ** module chunks = 0\n **/","var vars = require('./core');\n\nmodule.exports = vars.createClass('Radar', ['getPointsAtEvent']);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-chartjs/lib/radar.js\n ** module id = 178\n ** module chunks = 0\n **/","import * as _ from 'lodash';\nimport * as React from  'react';\nimport {Observable, Subscription} from 'rxjs';\nimport {Line} from  'react-chartjs';\nimport {Ticker as TickerModel} from '../models';\nimport {ITicker, ITickerData} from '../';\nimport {Chart, Search} from './';\n\nlet configs = require('../../../config.json');\n\ninterface IAppProps {}\ninterface IAppState {\n\tisOnline?: boolean;\n\ttickers?: ITicker;\n\tactiveTickers?: ITicker;\n}\n\nexport class App extends React.Component<IAppProps, IAppState>{\n\tprivate tickerModel: TickerModel;\n\tprivate tickers: any = _.transform(configs.tickers, (reduction: any, name: string, ticker: string) => {\n\t\treduction[ticker] = null;\n\t}, {});\n\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.tickerModel = new TickerModel();\n\t\tthis.state = {\n\t\t\ttickers: this.tickers,\n\t\t\tactiveTickers: {},\n\t\t\tisOnline: false\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.tickerModel.connectionState\n\t\t\t.map(({type}) => type)\n\t\t\t.subscribe(type => this.setState({\n\t\t\t\tisOnline: type === 'open'\n\t\t\t}));\n\t}\n\n\ttoggle(code: string, add: boolean = true): void {\n\t\tlet ticker: ITicker = _.get(this.tickers, code);\n\n\t\tif(_.isUndefined(ticker)){\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tickers[code] = add ? this.tickerModel.get(code) : null;\n\n\t\tthis.setState({\n\t\t\ttickers: this.tickers,\n\t\t\tactiveTickers: _.omitBy(this.tickers, _.isNull)\n\t\t});\n\t}\n\n\trender(): JSX.Element {\t\t\n\t\tlet charts: Array<JSX.Element> = _.map(this.state.activeTickers as any, (ticker: Observable<ITickerData>, code: string) => {\n\t\t\treturn <Chart key={code} code={code} name={_.get(configs.tickers, code, '')} ticker={ticker}/>;\n\t\t});\n\n\t\treturn (\n\t\t\t<section className=\"ui container\">\n\t\t\t\t<label className={`ui ${this.state.isOnline ? 'green' : 'red'} circular big label`} id=\"connection-state\"></label>\n\t\t\t\t<Search toggle={(code, add) => this.toggle(code, add)}/>\n\n\t\t\t\t{charts}\n\t\t\t</section>\n\t\t);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/App.tsx\n **/","import {Ticker} from './Ticker';\n\nexport {\n\tTicker\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/models/index.ts\n **/","import * as _ from 'lodash';\nimport {\n\tObservable,\n\tSubscriber,\n\tSubscription,\n\tSubject\n} from 'rxjs';\nimport {\n\tWebSocketSubject,\n\tWebSocketSubjectConfig\n} from 'rxjs/observable/dom/WebSocketSubject';\nimport {ITickerData} from '../';\n\nexport class Ticker {\n\tprivate _ws: WebSocketSubject<ITickerData>;\n\tprivate _source: Observable<ITickerData>;\n\tpublic connectionState: Subject<Event> = new Subject<Event>();\n\n\tget ws(): {client: WebSocketSubject<ITickerData>, source: Observable<ITickerData>} {\n\t\tif (!(this.isOpen() || this.isConnecting())) {\n\t\t\tthis._ws = Observable.webSocket<ITickerData>({\n\t\t\t\turl: process.env.NODE_ENV === 'production' ? 'ws://tdc-rxjs.herokuapp.com/ws' : 'ws://localhost:3000/ws',\n\t\t\t\topenObserver: this.connectionState,\n\t\t\t\tcloseObserver: this.connectionState\n\t\t\t});\n\t\t\t\n\t\t\tthis._source = this._ws.share();\n\t\t}\n\n\t\treturn {\n\t\t\tclient: this._ws,\n\t\t\tsource: this._source\n\t\t};\n\t}\n\n\tget(code: string): Observable<ITickerData> {\n\t\treturn Observable.create((subscriber: Subscriber<ITickerData>) => {\n\t\t\tlet sub: Subscription = this.ws.source\n\t\t\t\t.filter(({c, e}) => e === 'update' && c === code)\n\t\t\t\t.subscribe(subscriber);\n\n\t\t\tthis.send({\n\t\t\t\te: 'subscribe',\n\t\t\t\tp: code\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tthis.send({\n\t\t\t\t\te: 'unsubscribe',\n\t\t\t\t\tp: code\n\t\t\t\t});\n\n\t\t\t\tsub.unsubscribe();\n\t\t\t}\n\t\t})\n\t\t.retryWhen(err => err.delay(1000));\n\t}\n\n\tprivate isOpen(): boolean {\n\t\tif (!_.get(this, '_ws.socket')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(this._ws.socket.readyState === this._ws.socket.OPEN);\n\t}\n\n\tprivate isConnecting(): boolean {\n\t\tif (!_.get(this, '_ws.socket')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(this._ws.socket.readyState === this._ws.socket.CONNECTING);\n\t}\n\n\tprivate send(data: any): void {\n\t\tif (_.isObjectLike(data)) {\n\t\t\tdata = JSON.stringify(data);\n\t\t}\n\n\t\tthis.ws.client.next(data);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/models/Ticker.ts\n **/","module.exports = {\n\t\"tickers\": {\n\t\t\"msft\": \"Microsoft Corporation\",\n\t\t\"nflx\": \"Netflix Inc.\",\n\t\t\"adbe\": \"Adobe Systems Inc.\",\n\t\t\"aapl\": \"Apple Inc.\",\n\t\t\"AKAM\": \"Akamai Technologies Inc.\",\n\t\t\"BIDU\": \"Baidu Inc.\",\n\t\t\"CARB\": \"Carbonite Inc.\",\n\t\t\"CHICF\": \"ChitrChatr Communications Inc.\",\n\t\t\"CNV\": \"Cnova N.V.\",\n\t\t\"CCOI\": \"Cogent Communications Holdings Inc.\",\n\t\t\"CXDO\": \"Crexendo Inc.\",\n\t\t\"CRWG\": \"CrowdGather Inc.\",\n\t\t\"FB\": \"Facebook Inc.\",\n\t\t\"FLPC\": \"First Liberty Power Corp.\",\n\t\t\"GDDY\": \"GoDaddy Inc.\",\n\t\t\"HDSI\": \"HDS International Corp.\",\n\t\t\"IAC\": \"IAC/InterActiveCorp.\",\n\t\t\"GEEK\": \"INTERNET AMERICA\",\n\t\t\"JCOM\": \"j2 Global Inc.\",\n\t\t\"LOGL\": \"Legend Oil & Gas Ltd.\",\n\t\t\"LLNW\": \"Limelight Networks Inc.\",\n\t\t\"MEET\": \"MeetMe Inc.\",\n\t\t\"MOMO\": \"Momo Inc.\",\n\t\t\"NTES\": \"Netease Inc.\",\n\t\t\"NEWC\": \"New Colombia Resources Inc.\",\n\t\t\"EGOV\": \"NIC Inc.\",\n\t\t\"OPESY\": \"Opera Software ASA ADR\",\n\t\t\"RAX\": \"Rackspace Hosting Inc.\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./config.json\n ** module id = 521\n ** module chunks = 0\n **/","import * as _ from 'lodash';\nimport * as React from  'react';\nimport {ITickerData} from '../';\n\nlet configs = require('../../../config.json');\n\ninterface ISearchProps {\n\ttoggle: (code: string, add?: boolean) => void\n}\ninterface ISearchState {}\n\nexport class Search extends React.Component<ISearchProps, ISearchState>{\n\tprivate $dropdown: any;\n\n\tcomponentDidMount(): void {\n\t\tthis.$dropdown = $('.ui.dropdown');\n\n\t\tthis.$dropdown.dropdown({\n\t\t\tonAdd: code => this.props.toggle(code),\n    \t\tonRemove: code => this.props.toggle(code, false)\n\t\t});\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.$dropdown.dropdown('destroy');\n\t}\n\n\trender(): JSX.Element {\n\t\tlet options: Array<JSX.Element> = _.map(configs.tickers, (name: string, code: string) => <option key={code} value={code}>{name}</option>)\n\n\t\treturn (\n\t\t\t<section>\n\t\t\t\t<select className=\"ui fluid search dropdown\" multiple>\n\t\t\t\t\t<option value=\"\">Select Ticker</option>\n\t\t\t\t\t{options}\n\t\t\t\t</select>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/Search.tsx\n **/"],"sourceRoot":""}